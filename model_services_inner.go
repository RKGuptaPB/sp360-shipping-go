/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the ServicesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesInner{}

// ServicesInner struct for ServicesInner
type ServicesInner struct {
	// The branded name of service.
	BrandedName *string `json:"brandedName,omitempty"`
	// The unique identifier given to the carrier specific service.
	ServiceId *string `json:"serviceId,omitempty"`
}

// NewServicesInner instantiates a new ServicesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesInner() *ServicesInner {
	this := ServicesInner{}
	return &this
}

// NewServicesInnerWithDefaults instantiates a new ServicesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesInnerWithDefaults() *ServicesInner {
	this := ServicesInner{}
	return &this
}

// GetBrandedName returns the BrandedName field value if set, zero value otherwise.
func (o *ServicesInner) GetBrandedName() string {
	if o == nil || IsNil(o.BrandedName) {
		var ret string
		return ret
	}
	return *o.BrandedName
}

// GetBrandedNameOk returns a tuple with the BrandedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesInner) GetBrandedNameOk() (*string, bool) {
	if o == nil || IsNil(o.BrandedName) {
		return nil, false
	}
	return o.BrandedName, true
}

// HasBrandedName returns a boolean if a field has been set.
func (o *ServicesInner) HasBrandedName() bool {
	if o != nil && !IsNil(o.BrandedName) {
		return true
	}

	return false
}

// SetBrandedName gets a reference to the given string and assigns it to the BrandedName field.
func (o *ServicesInner) SetBrandedName(v string) {
	o.BrandedName = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *ServicesInner) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesInner) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *ServicesInner) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *ServicesInner) SetServiceId(v string) {
	o.ServiceId = &v
}

func (o ServicesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrandedName) {
		toSerialize["brandedName"] = o.BrandedName
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	return toSerialize, nil
}

type NullableServicesInner struct {
	value *ServicesInner
	isSet bool
}

func (v NullableServicesInner) Get() *ServicesInner {
	return v.value
}

func (v *NullableServicesInner) Set(val *ServicesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesInner(val *ServicesInner) *NullableServicesInner {
	return &NullableServicesInner{value: val, isSet: true}
}

func (v NullableServicesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


