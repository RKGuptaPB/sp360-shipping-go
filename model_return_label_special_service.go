/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReturnLabelSpecialService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReturnLabelSpecialService{}

// ReturnLabelSpecialService struct for ReturnLabelSpecialService
type ReturnLabelSpecialService struct {
	// >- The parameters to set for the special service, such as an insurance value or a receipt-number format. This is required if the special service requires input parameters. If a special service does not require input parameters, you can either leave out the array or pass an empty array.
	InputParameters []Parameter `json:"inputParameters,omitempty"`
	// A unique identifier associate to the special service, which is to be applied.
	SpecialserviceId string `json:"specialserviceId"`
}

type _ReturnLabelSpecialService ReturnLabelSpecialService

// NewReturnLabelSpecialService instantiates a new ReturnLabelSpecialService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnLabelSpecialService(specialserviceId string) *ReturnLabelSpecialService {
	this := ReturnLabelSpecialService{}
	this.SpecialserviceId = specialserviceId
	return &this
}

// NewReturnLabelSpecialServiceWithDefaults instantiates a new ReturnLabelSpecialService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnLabelSpecialServiceWithDefaults() *ReturnLabelSpecialService {
	this := ReturnLabelSpecialService{}
	return &this
}

// GetInputParameters returns the InputParameters field value if set, zero value otherwise.
func (o *ReturnLabelSpecialService) GetInputParameters() []Parameter {
	if o == nil || IsNil(o.InputParameters) {
		var ret []Parameter
		return ret
	}
	return o.InputParameters
}

// GetInputParametersOk returns a tuple with the InputParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnLabelSpecialService) GetInputParametersOk() ([]Parameter, bool) {
	if o == nil || IsNil(o.InputParameters) {
		return nil, false
	}
	return o.InputParameters, true
}

// HasInputParameters returns a boolean if a field has been set.
func (o *ReturnLabelSpecialService) HasInputParameters() bool {
	if o != nil && !IsNil(o.InputParameters) {
		return true
	}

	return false
}

// SetInputParameters gets a reference to the given []Parameter and assigns it to the InputParameters field.
func (o *ReturnLabelSpecialService) SetInputParameters(v []Parameter) {
	o.InputParameters = v
}

// GetSpecialserviceId returns the SpecialserviceId field value
func (o *ReturnLabelSpecialService) GetSpecialserviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpecialserviceId
}

// GetSpecialserviceIdOk returns a tuple with the SpecialserviceId field value
// and a boolean to check if the value has been set.
func (o *ReturnLabelSpecialService) GetSpecialserviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpecialserviceId, true
}

// SetSpecialserviceId sets field value
func (o *ReturnLabelSpecialService) SetSpecialserviceId(v string) {
	o.SpecialserviceId = v
}

func (o ReturnLabelSpecialService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReturnLabelSpecialService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InputParameters) {
		toSerialize["inputParameters"] = o.InputParameters
	}
	toSerialize["specialserviceId"] = o.SpecialserviceId
	return toSerialize, nil
}

func (o *ReturnLabelSpecialService) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"specialserviceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReturnLabelSpecialService := _ReturnLabelSpecialService{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReturnLabelSpecialService)

	if err != nil {
		return err
	}

	*o = ReturnLabelSpecialService(varReturnLabelSpecialService)

	return err
}

type NullableReturnLabelSpecialService struct {
	value *ReturnLabelSpecialService
	isSet bool
}

func (v NullableReturnLabelSpecialService) Get() *ReturnLabelSpecialService {
	return v.value
}

func (v *NullableReturnLabelSpecialService) Set(val *ReturnLabelSpecialService) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnLabelSpecialService) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnLabelSpecialService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnLabelSpecialService(val *ReturnLabelSpecialService) *NullableReturnLabelSpecialService {
	return &NullableReturnLabelSpecialService{value: val, isSet: true}
}

func (v NullableReturnLabelSpecialService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnLabelSpecialService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


