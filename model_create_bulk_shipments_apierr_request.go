/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateBulkShipmentsAPIERRRequest - struct for CreateBulkShipmentsAPIERRRequest
type CreateBulkShipmentsAPIERRRequest struct {
	CreateBulkShipmentsERRCoversheet *CreateBulkShipmentsERRCoversheet
	CreateBulkShipmentsERRLabel *CreateBulkShipmentsERRLabel
}

// CreateBulkShipmentsERRCoversheetAsCreateBulkShipmentsAPIERRRequest is a convenience function that returns CreateBulkShipmentsERRCoversheet wrapped in CreateBulkShipmentsAPIERRRequest
func CreateBulkShipmentsERRCoversheetAsCreateBulkShipmentsAPIERRRequest(v *CreateBulkShipmentsERRCoversheet) CreateBulkShipmentsAPIERRRequest {
	return CreateBulkShipmentsAPIERRRequest{
		CreateBulkShipmentsERRCoversheet: v,
	}
}

// CreateBulkShipmentsERRLabelAsCreateBulkShipmentsAPIERRRequest is a convenience function that returns CreateBulkShipmentsERRLabel wrapped in CreateBulkShipmentsAPIERRRequest
func CreateBulkShipmentsERRLabelAsCreateBulkShipmentsAPIERRRequest(v *CreateBulkShipmentsERRLabel) CreateBulkShipmentsAPIERRRequest {
	return CreateBulkShipmentsAPIERRRequest{
		CreateBulkShipmentsERRLabel: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateBulkShipmentsAPIERRRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateBulkShipmentsERRCoversheet
	err = newStrictDecoder(data).Decode(&dst.CreateBulkShipmentsERRCoversheet)
	if err == nil {
		jsonCreateBulkShipmentsERRCoversheet, _ := json.Marshal(dst.CreateBulkShipmentsERRCoversheet)
		if string(jsonCreateBulkShipmentsERRCoversheet) == "{}" { // empty struct
			dst.CreateBulkShipmentsERRCoversheet = nil
		} else {
			if err = validator.Validate(dst.CreateBulkShipmentsERRCoversheet); err != nil {
				dst.CreateBulkShipmentsERRCoversheet = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateBulkShipmentsERRCoversheet = nil
	}

	// try to unmarshal data into CreateBulkShipmentsERRLabel
	err = newStrictDecoder(data).Decode(&dst.CreateBulkShipmentsERRLabel)
	if err == nil {
		jsonCreateBulkShipmentsERRLabel, _ := json.Marshal(dst.CreateBulkShipmentsERRLabel)
		if string(jsonCreateBulkShipmentsERRLabel) == "{}" { // empty struct
			dst.CreateBulkShipmentsERRLabel = nil
		} else {
			if err = validator.Validate(dst.CreateBulkShipmentsERRLabel); err != nil {
				dst.CreateBulkShipmentsERRLabel = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateBulkShipmentsERRLabel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateBulkShipmentsERRCoversheet = nil
		dst.CreateBulkShipmentsERRLabel = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateBulkShipmentsAPIERRRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateBulkShipmentsAPIERRRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateBulkShipmentsAPIERRRequest) MarshalJSON() ([]byte, error) {
	if src.CreateBulkShipmentsERRCoversheet != nil {
		return json.Marshal(&src.CreateBulkShipmentsERRCoversheet)
	}

	if src.CreateBulkShipmentsERRLabel != nil {
		return json.Marshal(&src.CreateBulkShipmentsERRLabel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateBulkShipmentsAPIERRRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateBulkShipmentsERRCoversheet != nil {
		return obj.CreateBulkShipmentsERRCoversheet
	}

	if obj.CreateBulkShipmentsERRLabel != nil {
		return obj.CreateBulkShipmentsERRLabel
	}

	// all schemas are nil
	return nil
}

type NullableCreateBulkShipmentsAPIERRRequest struct {
	value *CreateBulkShipmentsAPIERRRequest
	isSet bool
}

func (v NullableCreateBulkShipmentsAPIERRRequest) Get() *CreateBulkShipmentsAPIERRRequest {
	return v.value
}

func (v *NullableCreateBulkShipmentsAPIERRRequest) Set(val *CreateBulkShipmentsAPIERRRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBulkShipmentsAPIERRRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBulkShipmentsAPIERRRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBulkShipmentsAPIERRRequest(val *CreateBulkShipmentsAPIERRRequest) *NullableCreateBulkShipmentsAPIERRRequest {
	return &NullableCreateBulkShipmentsAPIERRRequest{value: val, isSet: true}
}

func (v NullableCreateBulkShipmentsAPIERRRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBulkShipmentsAPIERRRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


