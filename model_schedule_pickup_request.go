/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// SchedulePickupRequest - struct for SchedulePickupRequest
type SchedulePickupRequest struct {
	SchedulePickupDHLEXPRequest *SchedulePickupDHLEXPRequest
	SchedulePickupFedexRequest *SchedulePickupFedexRequest
	SchedulePickupUPSRequest *SchedulePickupUPSRequest
	SchedulePickupUSPSRequest *SchedulePickupUSPSRequest
}

// SchedulePickupDHLEXPRequestAsSchedulePickupRequest is a convenience function that returns SchedulePickupDHLEXPRequest wrapped in SchedulePickupRequest
func SchedulePickupDHLEXPRequestAsSchedulePickupRequest(v *SchedulePickupDHLEXPRequest) SchedulePickupRequest {
	return SchedulePickupRequest{
		SchedulePickupDHLEXPRequest: v,
	}
}

// SchedulePickupFedexRequestAsSchedulePickupRequest is a convenience function that returns SchedulePickupFedexRequest wrapped in SchedulePickupRequest
func SchedulePickupFedexRequestAsSchedulePickupRequest(v *SchedulePickupFedexRequest) SchedulePickupRequest {
	return SchedulePickupRequest{
		SchedulePickupFedexRequest: v,
	}
}

// SchedulePickupUPSRequestAsSchedulePickupRequest is a convenience function that returns SchedulePickupUPSRequest wrapped in SchedulePickupRequest
func SchedulePickupUPSRequestAsSchedulePickupRequest(v *SchedulePickupUPSRequest) SchedulePickupRequest {
	return SchedulePickupRequest{
		SchedulePickupUPSRequest: v,
	}
}

// SchedulePickupUSPSRequestAsSchedulePickupRequest is a convenience function that returns SchedulePickupUSPSRequest wrapped in SchedulePickupRequest
func SchedulePickupUSPSRequestAsSchedulePickupRequest(v *SchedulePickupUSPSRequest) SchedulePickupRequest {
	return SchedulePickupRequest{
		SchedulePickupUSPSRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SchedulePickupRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SchedulePickupDHLEXPRequest
	err = newStrictDecoder(data).Decode(&dst.SchedulePickupDHLEXPRequest)
	if err == nil {
		jsonSchedulePickupDHLEXPRequest, _ := json.Marshal(dst.SchedulePickupDHLEXPRequest)
		if string(jsonSchedulePickupDHLEXPRequest) == "{}" { // empty struct
			dst.SchedulePickupDHLEXPRequest = nil
		} else {
			if err = validator.Validate(dst.SchedulePickupDHLEXPRequest); err != nil {
				dst.SchedulePickupDHLEXPRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.SchedulePickupDHLEXPRequest = nil
	}

	// try to unmarshal data into SchedulePickupFedexRequest
	err = newStrictDecoder(data).Decode(&dst.SchedulePickupFedexRequest)
	if err == nil {
		jsonSchedulePickupFedexRequest, _ := json.Marshal(dst.SchedulePickupFedexRequest)
		if string(jsonSchedulePickupFedexRequest) == "{}" { // empty struct
			dst.SchedulePickupFedexRequest = nil
		} else {
			if err = validator.Validate(dst.SchedulePickupFedexRequest); err != nil {
				dst.SchedulePickupFedexRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.SchedulePickupFedexRequest = nil
	}

	// try to unmarshal data into SchedulePickupUPSRequest
	err = newStrictDecoder(data).Decode(&dst.SchedulePickupUPSRequest)
	if err == nil {
		jsonSchedulePickupUPSRequest, _ := json.Marshal(dst.SchedulePickupUPSRequest)
		if string(jsonSchedulePickupUPSRequest) == "{}" { // empty struct
			dst.SchedulePickupUPSRequest = nil
		} else {
			if err = validator.Validate(dst.SchedulePickupUPSRequest); err != nil {
				dst.SchedulePickupUPSRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.SchedulePickupUPSRequest = nil
	}

	// try to unmarshal data into SchedulePickupUSPSRequest
	err = newStrictDecoder(data).Decode(&dst.SchedulePickupUSPSRequest)
	if err == nil {
		jsonSchedulePickupUSPSRequest, _ := json.Marshal(dst.SchedulePickupUSPSRequest)
		if string(jsonSchedulePickupUSPSRequest) == "{}" { // empty struct
			dst.SchedulePickupUSPSRequest = nil
		} else {
			if err = validator.Validate(dst.SchedulePickupUSPSRequest); err != nil {
				dst.SchedulePickupUSPSRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.SchedulePickupUSPSRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SchedulePickupDHLEXPRequest = nil
		dst.SchedulePickupFedexRequest = nil
		dst.SchedulePickupUPSRequest = nil
		dst.SchedulePickupUSPSRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SchedulePickupRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SchedulePickupRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SchedulePickupRequest) MarshalJSON() ([]byte, error) {
	if src.SchedulePickupDHLEXPRequest != nil {
		return json.Marshal(&src.SchedulePickupDHLEXPRequest)
	}

	if src.SchedulePickupFedexRequest != nil {
		return json.Marshal(&src.SchedulePickupFedexRequest)
	}

	if src.SchedulePickupUPSRequest != nil {
		return json.Marshal(&src.SchedulePickupUPSRequest)
	}

	if src.SchedulePickupUSPSRequest != nil {
		return json.Marshal(&src.SchedulePickupUSPSRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SchedulePickupRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SchedulePickupDHLEXPRequest != nil {
		return obj.SchedulePickupDHLEXPRequest
	}

	if obj.SchedulePickupFedexRequest != nil {
		return obj.SchedulePickupFedexRequest
	}

	if obj.SchedulePickupUPSRequest != nil {
		return obj.SchedulePickupUPSRequest
	}

	if obj.SchedulePickupUSPSRequest != nil {
		return obj.SchedulePickupUSPSRequest
	}

	// all schemas are nil
	return nil
}

type NullableSchedulePickupRequest struct {
	value *SchedulePickupRequest
	isSet bool
}

func (v NullableSchedulePickupRequest) Get() *SchedulePickupRequest {
	return v.value
}

func (v *NullableSchedulePickupRequest) Set(val *SchedulePickupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulePickupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulePickupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulePickupRequest(val *SchedulePickupRequest) *NullableSchedulePickupRequest {
	return &NullableSchedulePickupRequest{value: val, isSet: true}
}

func (v NullableSchedulePickupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulePickupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


