/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// SchedulePickup200Response - struct for SchedulePickup200Response
type SchedulePickup200Response struct {
	SchedulePickupDHLEXPResponse *SchedulePickupDHLEXPResponse
	SchedulePickupUPSResponse *SchedulePickupUPSResponse
	SchedulePickupUSPSResponse *SchedulePickupUSPSResponse
}

// SchedulePickupDHLEXPResponseAsSchedulePickup200Response is a convenience function that returns SchedulePickupDHLEXPResponse wrapped in SchedulePickup200Response
func SchedulePickupDHLEXPResponseAsSchedulePickup200Response(v *SchedulePickupDHLEXPResponse) SchedulePickup200Response {
	return SchedulePickup200Response{
		SchedulePickupDHLEXPResponse: v,
	}
}

// SchedulePickupUPSResponseAsSchedulePickup200Response is a convenience function that returns SchedulePickupUPSResponse wrapped in SchedulePickup200Response
func SchedulePickupUPSResponseAsSchedulePickup200Response(v *SchedulePickupUPSResponse) SchedulePickup200Response {
	return SchedulePickup200Response{
		SchedulePickupUPSResponse: v,
	}
}

// SchedulePickupUSPSResponseAsSchedulePickup200Response is a convenience function that returns SchedulePickupUSPSResponse wrapped in SchedulePickup200Response
func SchedulePickupUSPSResponseAsSchedulePickup200Response(v *SchedulePickupUSPSResponse) SchedulePickup200Response {
	return SchedulePickup200Response{
		SchedulePickupUSPSResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SchedulePickup200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SchedulePickupDHLEXPResponse
	err = newStrictDecoder(data).Decode(&dst.SchedulePickupDHLEXPResponse)
	if err == nil {
		jsonSchedulePickupDHLEXPResponse, _ := json.Marshal(dst.SchedulePickupDHLEXPResponse)
		if string(jsonSchedulePickupDHLEXPResponse) == "{}" { // empty struct
			dst.SchedulePickupDHLEXPResponse = nil
		} else {
			if err = validator.Validate(dst.SchedulePickupDHLEXPResponse); err != nil {
				dst.SchedulePickupDHLEXPResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.SchedulePickupDHLEXPResponse = nil
	}

	// try to unmarshal data into SchedulePickupUPSResponse
	err = newStrictDecoder(data).Decode(&dst.SchedulePickupUPSResponse)
	if err == nil {
		jsonSchedulePickupUPSResponse, _ := json.Marshal(dst.SchedulePickupUPSResponse)
		if string(jsonSchedulePickupUPSResponse) == "{}" { // empty struct
			dst.SchedulePickupUPSResponse = nil
		} else {
			if err = validator.Validate(dst.SchedulePickupUPSResponse); err != nil {
				dst.SchedulePickupUPSResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.SchedulePickupUPSResponse = nil
	}

	// try to unmarshal data into SchedulePickupUSPSResponse
	err = newStrictDecoder(data).Decode(&dst.SchedulePickupUSPSResponse)
	if err == nil {
		jsonSchedulePickupUSPSResponse, _ := json.Marshal(dst.SchedulePickupUSPSResponse)
		if string(jsonSchedulePickupUSPSResponse) == "{}" { // empty struct
			dst.SchedulePickupUSPSResponse = nil
		} else {
			if err = validator.Validate(dst.SchedulePickupUSPSResponse); err != nil {
				dst.SchedulePickupUSPSResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.SchedulePickupUSPSResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SchedulePickupDHLEXPResponse = nil
		dst.SchedulePickupUPSResponse = nil
		dst.SchedulePickupUSPSResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SchedulePickup200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SchedulePickup200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SchedulePickup200Response) MarshalJSON() ([]byte, error) {
	if src.SchedulePickupDHLEXPResponse != nil {
		return json.Marshal(&src.SchedulePickupDHLEXPResponse)
	}

	if src.SchedulePickupUPSResponse != nil {
		return json.Marshal(&src.SchedulePickupUPSResponse)
	}

	if src.SchedulePickupUSPSResponse != nil {
		return json.Marshal(&src.SchedulePickupUSPSResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SchedulePickup200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SchedulePickupDHLEXPResponse != nil {
		return obj.SchedulePickupDHLEXPResponse
	}

	if obj.SchedulePickupUPSResponse != nil {
		return obj.SchedulePickupUPSResponse
	}

	if obj.SchedulePickupUSPSResponse != nil {
		return obj.SchedulePickupUSPSResponse
	}

	// all schemas are nil
	return nil
}

type NullableSchedulePickup200Response struct {
	value *SchedulePickup200Response
	isSet bool
}

func (v NullableSchedulePickup200Response) Get() *SchedulePickup200Response {
	return v.value
}

func (v *NullableSchedulePickup200Response) Set(val *SchedulePickup200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulePickup200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulePickup200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulePickup200Response(val *SchedulePickup200Response) *NullableSchedulePickup200Response {
	return &NullableSchedulePickup200Response{value: val, isSet: true}
}

func (v NullableSchedulePickup200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulePickup200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


