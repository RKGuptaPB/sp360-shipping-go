/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner{}

// SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner struct for SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner
type SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner struct {
	// It display the unique id of the special service
	SpecialserviceId *string `json:"specialserviceId,omitempty"`
	// The brand name of the special service.
	BrandedName *string `json:"brandedName,omitempty"`
	// The unique identifier associated with the special service based on the category.
	CategoryId *string `json:"categoryId,omitempty"`
	// The special service is categorized with some name and rules, It indicates the category name of the special service.
	CategoryName *string `json:"categoryName,omitempty"`
	// Indicates non-compatible special services with this special service
	IncompatibleSpecialServices []string `json:"incompatibleSpecialServices,omitempty"`
	// The rules defined for input parameters for this special service
	InputParameterRules []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner `json:"inputParameterRules,omitempty"`
	// It displays other pre-requisite special services for this special service
	PrerequisiteRules []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner `json:"prerequisiteRules,omitempty"`
	// If this special service is trackable or not
	Trackable *bool `json:"trackable,omitempty"`
}

// NewSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner instantiates a new SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner() *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner {
	this := SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner{}
	return &this
}

// NewSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerWithDefaults instantiates a new SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerWithDefaults() *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner {
	this := SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner{}
	return &this
}

// GetSpecialserviceId returns the SpecialserviceId field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetSpecialserviceId() string {
	if o == nil || IsNil(o.SpecialserviceId) {
		var ret string
		return ret
	}
	return *o.SpecialserviceId
}

// GetSpecialserviceIdOk returns a tuple with the SpecialserviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetSpecialserviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SpecialserviceId) {
		return nil, false
	}
	return o.SpecialserviceId, true
}

// HasSpecialserviceId returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) HasSpecialserviceId() bool {
	if o != nil && !IsNil(o.SpecialserviceId) {
		return true
	}

	return false
}

// SetSpecialserviceId gets a reference to the given string and assigns it to the SpecialserviceId field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) SetSpecialserviceId(v string) {
	o.SpecialserviceId = &v
}

// GetBrandedName returns the BrandedName field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetBrandedName() string {
	if o == nil || IsNil(o.BrandedName) {
		var ret string
		return ret
	}
	return *o.BrandedName
}

// GetBrandedNameOk returns a tuple with the BrandedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetBrandedNameOk() (*string, bool) {
	if o == nil || IsNil(o.BrandedName) {
		return nil, false
	}
	return o.BrandedName, true
}

// HasBrandedName returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) HasBrandedName() bool {
	if o != nil && !IsNil(o.BrandedName) {
		return true
	}

	return false
}

// SetBrandedName gets a reference to the given string and assigns it to the BrandedName field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) SetBrandedName(v string) {
	o.BrandedName = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetCategoryName returns the CategoryName field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetCategoryName() string {
	if o == nil || IsNil(o.CategoryName) {
		var ret string
		return ret
	}
	return *o.CategoryName
}

// GetCategoryNameOk returns a tuple with the CategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetCategoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryName) {
		return nil, false
	}
	return o.CategoryName, true
}

// HasCategoryName returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) HasCategoryName() bool {
	if o != nil && !IsNil(o.CategoryName) {
		return true
	}

	return false
}

// SetCategoryName gets a reference to the given string and assigns it to the CategoryName field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) SetCategoryName(v string) {
	o.CategoryName = &v
}

// GetIncompatibleSpecialServices returns the IncompatibleSpecialServices field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetIncompatibleSpecialServices() []string {
	if o == nil || IsNil(o.IncompatibleSpecialServices) {
		var ret []string
		return ret
	}
	return o.IncompatibleSpecialServices
}

// GetIncompatibleSpecialServicesOk returns a tuple with the IncompatibleSpecialServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetIncompatibleSpecialServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncompatibleSpecialServices) {
		return nil, false
	}
	return o.IncompatibleSpecialServices, true
}

// HasIncompatibleSpecialServices returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) HasIncompatibleSpecialServices() bool {
	if o != nil && !IsNil(o.IncompatibleSpecialServices) {
		return true
	}

	return false
}

// SetIncompatibleSpecialServices gets a reference to the given []string and assigns it to the IncompatibleSpecialServices field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) SetIncompatibleSpecialServices(v []string) {
	o.IncompatibleSpecialServices = v
}

// GetInputParameterRules returns the InputParameterRules field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetInputParameterRules() []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner {
	if o == nil || IsNil(o.InputParameterRules) {
		var ret []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner
		return ret
	}
	return o.InputParameterRules
}

// GetInputParameterRulesOk returns a tuple with the InputParameterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetInputParameterRulesOk() ([]SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner, bool) {
	if o == nil || IsNil(o.InputParameterRules) {
		return nil, false
	}
	return o.InputParameterRules, true
}

// HasInputParameterRules returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) HasInputParameterRules() bool {
	if o != nil && !IsNil(o.InputParameterRules) {
		return true
	}

	return false
}

// SetInputParameterRules gets a reference to the given []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner and assigns it to the InputParameterRules field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) SetInputParameterRules(v []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner) {
	o.InputParameterRules = v
}

// GetPrerequisiteRules returns the PrerequisiteRules field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetPrerequisiteRules() []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner {
	if o == nil || IsNil(o.PrerequisiteRules) {
		var ret []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner
		return ret
	}
	return o.PrerequisiteRules
}

// GetPrerequisiteRulesOk returns a tuple with the PrerequisiteRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetPrerequisiteRulesOk() ([]SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner, bool) {
	if o == nil || IsNil(o.PrerequisiteRules) {
		return nil, false
	}
	return o.PrerequisiteRules, true
}

// HasPrerequisiteRules returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) HasPrerequisiteRules() bool {
	if o != nil && !IsNil(o.PrerequisiteRules) {
		return true
	}

	return false
}

// SetPrerequisiteRules gets a reference to the given []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner and assigns it to the PrerequisiteRules field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) SetPrerequisiteRules(v []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner) {
	o.PrerequisiteRules = v
}

// GetTrackable returns the Trackable field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetTrackable() bool {
	if o == nil || IsNil(o.Trackable) {
		var ret bool
		return ret
	}
	return *o.Trackable
}

// GetTrackableOk returns a tuple with the Trackable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) GetTrackableOk() (*bool, bool) {
	if o == nil || IsNil(o.Trackable) {
		return nil, false
	}
	return o.Trackable, true
}

// HasTrackable returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) HasTrackable() bool {
	if o != nil && !IsNil(o.Trackable) {
		return true
	}

	return false
}

// SetTrackable gets a reference to the given bool and assigns it to the Trackable field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) SetTrackable(v bool) {
	o.Trackable = &v
}

func (o SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SpecialserviceId) {
		toSerialize["specialserviceId"] = o.SpecialserviceId
	}
	if !IsNil(o.BrandedName) {
		toSerialize["brandedName"] = o.BrandedName
	}
	if !IsNil(o.CategoryId) {
		toSerialize["categoryId"] = o.CategoryId
	}
	if !IsNil(o.CategoryName) {
		toSerialize["categoryName"] = o.CategoryName
	}
	if !IsNil(o.IncompatibleSpecialServices) {
		toSerialize["incompatibleSpecialServices"] = o.IncompatibleSpecialServices
	}
	if !IsNil(o.InputParameterRules) {
		toSerialize["inputParameterRules"] = o.InputParameterRules
	}
	if !IsNil(o.PrerequisiteRules) {
		toSerialize["prerequisiteRules"] = o.PrerequisiteRules
	}
	if !IsNil(o.Trackable) {
		toSerialize["trackable"] = o.Trackable
	}
	return toSerialize, nil
}

type NullableSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner struct {
	value *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner
	isSet bool
}

func (v NullableSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) Get() *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner {
	return v.value
}

func (v *NullableSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) Set(val *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner(val *SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) *NullableSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner {
	return &NullableSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner{value: val, isSet: true}
}

func (v NullableSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


