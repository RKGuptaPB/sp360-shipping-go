/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Customs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Customs{}

// Customs struct for Customs
type Customs struct {
	CustomsInfo CustomsInfo `json:"customsInfo"`
	// The operation asks the information for each commodity for Customs clearance.
	CustomsItems []CustomsItem `json:"customsItems"`
}

type _Customs Customs

// NewCustoms instantiates a new Customs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustoms(customsInfo CustomsInfo, customsItems []CustomsItem) *Customs {
	this := Customs{}
	this.CustomsInfo = customsInfo
	this.CustomsItems = customsItems
	return &this
}

// NewCustomsWithDefaults instantiates a new Customs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomsWithDefaults() *Customs {
	this := Customs{}
	return &this
}

// GetCustomsInfo returns the CustomsInfo field value
func (o *Customs) GetCustomsInfo() CustomsInfo {
	if o == nil {
		var ret CustomsInfo
		return ret
	}

	return o.CustomsInfo
}

// GetCustomsInfoOk returns a tuple with the CustomsInfo field value
// and a boolean to check if the value has been set.
func (o *Customs) GetCustomsInfoOk() (*CustomsInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomsInfo, true
}

// SetCustomsInfo sets field value
func (o *Customs) SetCustomsInfo(v CustomsInfo) {
	o.CustomsInfo = v
}

// GetCustomsItems returns the CustomsItems field value
func (o *Customs) GetCustomsItems() []CustomsItem {
	if o == nil {
		var ret []CustomsItem
		return ret
	}

	return o.CustomsItems
}

// GetCustomsItemsOk returns a tuple with the CustomsItems field value
// and a boolean to check if the value has been set.
func (o *Customs) GetCustomsItemsOk() ([]CustomsItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomsItems, true
}

// SetCustomsItems sets field value
func (o *Customs) SetCustomsItems(v []CustomsItem) {
	o.CustomsItems = v
}

func (o Customs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Customs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customsInfo"] = o.CustomsInfo
	toSerialize["customsItems"] = o.CustomsItems
	return toSerialize, nil
}

func (o *Customs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customsInfo",
		"customsItems",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustoms := _Customs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustoms)

	if err != nil {
		return err
	}

	*o = Customs(varCustoms)

	return err
}

type NullableCustoms struct {
	value *Customs
	isSet bool
}

func (v NullableCustoms) Get() *Customs {
	return v.value
}

func (v *NullableCustoms) Set(val *Customs) {
	v.value = val
	v.isSet = true
}

func (v NullableCustoms) IsSet() bool {
	return v.isSet
}

func (v *NullableCustoms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustoms(val *Customs) *NullableCustoms {
	return &NullableCustoms{value: val, isSet: true}
}

func (v NullableCustoms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustoms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


