/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ShipmentDomesticByRateGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShipmentDomesticByRateGroup{}

// ShipmentDomesticByRateGroup struct for ShipmentDomesticByRateGroup
type ShipmentDomesticByRateGroup struct {
	FromAddress FromAddressV2 `json:"fromAddress"`
	ToAddress ToAddressV2 `json:"toAddress"`
	Parcel *ParcelV2 `json:"parcel,omitempty"`
	// Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.<br /> ParcelType can have categories like Package, Envelopes, Paks, Boxes, Tube, etc. 
	ParcelType *string `json:"parcelType,omitempty"`
	// By RateShop is a way to restrict the carrier services returned in a Rate Shop experience.<br /> Without this Rate Shop Group, which is attached to an Enterprise or Location, the carrier services shown to the end user, are all that will be available for each carrier, based on Addresses, Weight, Dimensions, and Package Type.
	RateShopBy *string `json:"rateShopBy,omitempty"`
	ByRateGroup *ShipmentDomesticByRateGroupByRateGroup `json:"byRateGroup,omitempty"`
	ShipmentOptions *ShipmentDomesticByRateGroupShipmentOptions `json:"shipmentOptions,omitempty"`
	References *ReferenceV2 `json:"references,omitempty"`
	// Additional metadata that needs to be stored for this shipment can be added here.<br /> For now, 'Cost Account Name' is supported.
	Metadata []ShipmentDomesticByRateGroupMetadataInner `json:"metadata,omitempty"`
	// Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size.
	LabelSize *string `json:"labelSize,omitempty"`
	// Defines the type of the Shipment.
	LabelType *string `json:"labelType,omitempty"`
	// Defines the file/format in which the label is printed.
	LabelFormat *string `json:"labelFormat,omitempty"`
	// Refers to a printer connected (directly or via network) to a computer.
	PrinterAliasName *string `json:"printerAliasName,omitempty"`
}

type _ShipmentDomesticByRateGroup ShipmentDomesticByRateGroup

// NewShipmentDomesticByRateGroup instantiates a new ShipmentDomesticByRateGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShipmentDomesticByRateGroup(fromAddress FromAddressV2, toAddress ToAddressV2) *ShipmentDomesticByRateGroup {
	this := ShipmentDomesticByRateGroup{}
	this.FromAddress = fromAddress
	this.ToAddress = toAddress
	return &this
}

// NewShipmentDomesticByRateGroupWithDefaults instantiates a new ShipmentDomesticByRateGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShipmentDomesticByRateGroupWithDefaults() *ShipmentDomesticByRateGroup {
	this := ShipmentDomesticByRateGroup{}
	return &this
}

// GetFromAddress returns the FromAddress field value
func (o *ShipmentDomesticByRateGroup) GetFromAddress() FromAddressV2 {
	if o == nil {
		var ret FromAddressV2
		return ret
	}

	return o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetFromAddressOk() (*FromAddressV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAddress, true
}

// SetFromAddress sets field value
func (o *ShipmentDomesticByRateGroup) SetFromAddress(v FromAddressV2) {
	o.FromAddress = v
}

// GetToAddress returns the ToAddress field value
func (o *ShipmentDomesticByRateGroup) GetToAddress() ToAddressV2 {
	if o == nil {
		var ret ToAddressV2
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetToAddressOk() (*ToAddressV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *ShipmentDomesticByRateGroup) SetToAddress(v ToAddressV2) {
	o.ToAddress = v
}

// GetParcel returns the Parcel field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetParcel() ParcelV2 {
	if o == nil || IsNil(o.Parcel) {
		var ret ParcelV2
		return ret
	}
	return *o.Parcel
}

// GetParcelOk returns a tuple with the Parcel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetParcelOk() (*ParcelV2, bool) {
	if o == nil || IsNil(o.Parcel) {
		return nil, false
	}
	return o.Parcel, true
}

// HasParcel returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasParcel() bool {
	if o != nil && !IsNil(o.Parcel) {
		return true
	}

	return false
}

// SetParcel gets a reference to the given ParcelV2 and assigns it to the Parcel field.
func (o *ShipmentDomesticByRateGroup) SetParcel(v ParcelV2) {
	o.Parcel = &v
}

// GetParcelType returns the ParcelType field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetParcelType() string {
	if o == nil || IsNil(o.ParcelType) {
		var ret string
		return ret
	}
	return *o.ParcelType
}

// GetParcelTypeOk returns a tuple with the ParcelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetParcelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ParcelType) {
		return nil, false
	}
	return o.ParcelType, true
}

// HasParcelType returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasParcelType() bool {
	if o != nil && !IsNil(o.ParcelType) {
		return true
	}

	return false
}

// SetParcelType gets a reference to the given string and assigns it to the ParcelType field.
func (o *ShipmentDomesticByRateGroup) SetParcelType(v string) {
	o.ParcelType = &v
}

// GetRateShopBy returns the RateShopBy field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetRateShopBy() string {
	if o == nil || IsNil(o.RateShopBy) {
		var ret string
		return ret
	}
	return *o.RateShopBy
}

// GetRateShopByOk returns a tuple with the RateShopBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetRateShopByOk() (*string, bool) {
	if o == nil || IsNil(o.RateShopBy) {
		return nil, false
	}
	return o.RateShopBy, true
}

// HasRateShopBy returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasRateShopBy() bool {
	if o != nil && !IsNil(o.RateShopBy) {
		return true
	}

	return false
}

// SetRateShopBy gets a reference to the given string and assigns it to the RateShopBy field.
func (o *ShipmentDomesticByRateGroup) SetRateShopBy(v string) {
	o.RateShopBy = &v
}

// GetByRateGroup returns the ByRateGroup field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetByRateGroup() ShipmentDomesticByRateGroupByRateGroup {
	if o == nil || IsNil(o.ByRateGroup) {
		var ret ShipmentDomesticByRateGroupByRateGroup
		return ret
	}
	return *o.ByRateGroup
}

// GetByRateGroupOk returns a tuple with the ByRateGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetByRateGroupOk() (*ShipmentDomesticByRateGroupByRateGroup, bool) {
	if o == nil || IsNil(o.ByRateGroup) {
		return nil, false
	}
	return o.ByRateGroup, true
}

// HasByRateGroup returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasByRateGroup() bool {
	if o != nil && !IsNil(o.ByRateGroup) {
		return true
	}

	return false
}

// SetByRateGroup gets a reference to the given ShipmentDomesticByRateGroupByRateGroup and assigns it to the ByRateGroup field.
func (o *ShipmentDomesticByRateGroup) SetByRateGroup(v ShipmentDomesticByRateGroupByRateGroup) {
	o.ByRateGroup = &v
}

// GetShipmentOptions returns the ShipmentOptions field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetShipmentOptions() ShipmentDomesticByRateGroupShipmentOptions {
	if o == nil || IsNil(o.ShipmentOptions) {
		var ret ShipmentDomesticByRateGroupShipmentOptions
		return ret
	}
	return *o.ShipmentOptions
}

// GetShipmentOptionsOk returns a tuple with the ShipmentOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetShipmentOptionsOk() (*ShipmentDomesticByRateGroupShipmentOptions, bool) {
	if o == nil || IsNil(o.ShipmentOptions) {
		return nil, false
	}
	return o.ShipmentOptions, true
}

// HasShipmentOptions returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasShipmentOptions() bool {
	if o != nil && !IsNil(o.ShipmentOptions) {
		return true
	}

	return false
}

// SetShipmentOptions gets a reference to the given ShipmentDomesticByRateGroupShipmentOptions and assigns it to the ShipmentOptions field.
func (o *ShipmentDomesticByRateGroup) SetShipmentOptions(v ShipmentDomesticByRateGroupShipmentOptions) {
	o.ShipmentOptions = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetReferences() ReferenceV2 {
	if o == nil || IsNil(o.References) {
		var ret ReferenceV2
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetReferencesOk() (*ReferenceV2, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given ReferenceV2 and assigns it to the References field.
func (o *ShipmentDomesticByRateGroup) SetReferences(v ReferenceV2) {
	o.References = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetMetadata() []ShipmentDomesticByRateGroupMetadataInner {
	if o == nil || IsNil(o.Metadata) {
		var ret []ShipmentDomesticByRateGroupMetadataInner
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetMetadataOk() ([]ShipmentDomesticByRateGroupMetadataInner, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []ShipmentDomesticByRateGroupMetadataInner and assigns it to the Metadata field.
func (o *ShipmentDomesticByRateGroup) SetMetadata(v []ShipmentDomesticByRateGroupMetadataInner) {
	o.Metadata = v
}

// GetLabelSize returns the LabelSize field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetLabelSize() string {
	if o == nil || IsNil(o.LabelSize) {
		var ret string
		return ret
	}
	return *o.LabelSize
}

// GetLabelSizeOk returns a tuple with the LabelSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetLabelSizeOk() (*string, bool) {
	if o == nil || IsNil(o.LabelSize) {
		return nil, false
	}
	return o.LabelSize, true
}

// HasLabelSize returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasLabelSize() bool {
	if o != nil && !IsNil(o.LabelSize) {
		return true
	}

	return false
}

// SetLabelSize gets a reference to the given string and assigns it to the LabelSize field.
func (o *ShipmentDomesticByRateGroup) SetLabelSize(v string) {
	o.LabelSize = &v
}

// GetLabelType returns the LabelType field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetLabelType() string {
	if o == nil || IsNil(o.LabelType) {
		var ret string
		return ret
	}
	return *o.LabelType
}

// GetLabelTypeOk returns a tuple with the LabelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetLabelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LabelType) {
		return nil, false
	}
	return o.LabelType, true
}

// HasLabelType returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasLabelType() bool {
	if o != nil && !IsNil(o.LabelType) {
		return true
	}

	return false
}

// SetLabelType gets a reference to the given string and assigns it to the LabelType field.
func (o *ShipmentDomesticByRateGroup) SetLabelType(v string) {
	o.LabelType = &v
}

// GetLabelFormat returns the LabelFormat field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetLabelFormat() string {
	if o == nil || IsNil(o.LabelFormat) {
		var ret string
		return ret
	}
	return *o.LabelFormat
}

// GetLabelFormatOk returns a tuple with the LabelFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetLabelFormatOk() (*string, bool) {
	if o == nil || IsNil(o.LabelFormat) {
		return nil, false
	}
	return o.LabelFormat, true
}

// HasLabelFormat returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasLabelFormat() bool {
	if o != nil && !IsNil(o.LabelFormat) {
		return true
	}

	return false
}

// SetLabelFormat gets a reference to the given string and assigns it to the LabelFormat field.
func (o *ShipmentDomesticByRateGroup) SetLabelFormat(v string) {
	o.LabelFormat = &v
}

// GetPrinterAliasName returns the PrinterAliasName field value if set, zero value otherwise.
func (o *ShipmentDomesticByRateGroup) GetPrinterAliasName() string {
	if o == nil || IsNil(o.PrinterAliasName) {
		var ret string
		return ret
	}
	return *o.PrinterAliasName
}

// GetPrinterAliasNameOk returns a tuple with the PrinterAliasName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentDomesticByRateGroup) GetPrinterAliasNameOk() (*string, bool) {
	if o == nil || IsNil(o.PrinterAliasName) {
		return nil, false
	}
	return o.PrinterAliasName, true
}

// HasPrinterAliasName returns a boolean if a field has been set.
func (o *ShipmentDomesticByRateGroup) HasPrinterAliasName() bool {
	if o != nil && !IsNil(o.PrinterAliasName) {
		return true
	}

	return false
}

// SetPrinterAliasName gets a reference to the given string and assigns it to the PrinterAliasName field.
func (o *ShipmentDomesticByRateGroup) SetPrinterAliasName(v string) {
	o.PrinterAliasName = &v
}

func (o ShipmentDomesticByRateGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShipmentDomesticByRateGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromAddress"] = o.FromAddress
	toSerialize["toAddress"] = o.ToAddress
	if !IsNil(o.Parcel) {
		toSerialize["parcel"] = o.Parcel
	}
	if !IsNil(o.ParcelType) {
		toSerialize["parcelType"] = o.ParcelType
	}
	if !IsNil(o.RateShopBy) {
		toSerialize["rateShopBy"] = o.RateShopBy
	}
	if !IsNil(o.ByRateGroup) {
		toSerialize["byRateGroup"] = o.ByRateGroup
	}
	if !IsNil(o.ShipmentOptions) {
		toSerialize["shipmentOptions"] = o.ShipmentOptions
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.LabelSize) {
		toSerialize["labelSize"] = o.LabelSize
	}
	if !IsNil(o.LabelType) {
		toSerialize["labelType"] = o.LabelType
	}
	if !IsNil(o.LabelFormat) {
		toSerialize["labelFormat"] = o.LabelFormat
	}
	if !IsNil(o.PrinterAliasName) {
		toSerialize["printerAliasName"] = o.PrinterAliasName
	}
	return toSerialize, nil
}

func (o *ShipmentDomesticByRateGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromAddress",
		"toAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShipmentDomesticByRateGroup := _ShipmentDomesticByRateGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShipmentDomesticByRateGroup)

	if err != nil {
		return err
	}

	*o = ShipmentDomesticByRateGroup(varShipmentDomesticByRateGroup)

	return err
}

type NullableShipmentDomesticByRateGroup struct {
	value *ShipmentDomesticByRateGroup
	isSet bool
}

func (v NullableShipmentDomesticByRateGroup) Get() *ShipmentDomesticByRateGroup {
	return v.value
}

func (v *NullableShipmentDomesticByRateGroup) Set(val *ShipmentDomesticByRateGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentDomesticByRateGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentDomesticByRateGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentDomesticByRateGroup(val *ShipmentDomesticByRateGroup) *NullableShipmentDomesticByRateGroup {
	return &NullableShipmentDomesticByRateGroup{value: val, isSet: true}
}

func (v NullableShipmentDomesticByRateGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentDomesticByRateGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


