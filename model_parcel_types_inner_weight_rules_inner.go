/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the ParcelTypesInnerWeightRulesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParcelTypesInnerWeightRulesInner{}

// ParcelTypesInnerWeightRulesInner struct for ParcelTypesInnerWeightRulesInner
type ParcelTypesInnerWeightRulesInner struct {
	// Defines maximum weight, which can be considered.
	MaxWeight *float32 `json:"maxWeight,omitempty"`
	// Defines minimum weight, which can be considered.
	MinWeight *float32 `json:"minWeight,omitempty"`
	Required *bool `json:"required,omitempty"`
	// UnitOfMeasurement is a standard for measuring the physical quantities of specified dimension parameters.
	UnitOfMeasurement *string `json:"unitOfMeasurement,omitempty"`
}

// NewParcelTypesInnerWeightRulesInner instantiates a new ParcelTypesInnerWeightRulesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParcelTypesInnerWeightRulesInner() *ParcelTypesInnerWeightRulesInner {
	this := ParcelTypesInnerWeightRulesInner{}
	return &this
}

// NewParcelTypesInnerWeightRulesInnerWithDefaults instantiates a new ParcelTypesInnerWeightRulesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParcelTypesInnerWeightRulesInnerWithDefaults() *ParcelTypesInnerWeightRulesInner {
	this := ParcelTypesInnerWeightRulesInner{}
	return &this
}

// GetMaxWeight returns the MaxWeight field value if set, zero value otherwise.
func (o *ParcelTypesInnerWeightRulesInner) GetMaxWeight() float32 {
	if o == nil || IsNil(o.MaxWeight) {
		var ret float32
		return ret
	}
	return *o.MaxWeight
}

// GetMaxWeightOk returns a tuple with the MaxWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelTypesInnerWeightRulesInner) GetMaxWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxWeight) {
		return nil, false
	}
	return o.MaxWeight, true
}

// HasMaxWeight returns a boolean if a field has been set.
func (o *ParcelTypesInnerWeightRulesInner) HasMaxWeight() bool {
	if o != nil && !IsNil(o.MaxWeight) {
		return true
	}

	return false
}

// SetMaxWeight gets a reference to the given float32 and assigns it to the MaxWeight field.
func (o *ParcelTypesInnerWeightRulesInner) SetMaxWeight(v float32) {
	o.MaxWeight = &v
}

// GetMinWeight returns the MinWeight field value if set, zero value otherwise.
func (o *ParcelTypesInnerWeightRulesInner) GetMinWeight() float32 {
	if o == nil || IsNil(o.MinWeight) {
		var ret float32
		return ret
	}
	return *o.MinWeight
}

// GetMinWeightOk returns a tuple with the MinWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelTypesInnerWeightRulesInner) GetMinWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.MinWeight) {
		return nil, false
	}
	return o.MinWeight, true
}

// HasMinWeight returns a boolean if a field has been set.
func (o *ParcelTypesInnerWeightRulesInner) HasMinWeight() bool {
	if o != nil && !IsNil(o.MinWeight) {
		return true
	}

	return false
}

// SetMinWeight gets a reference to the given float32 and assigns it to the MinWeight field.
func (o *ParcelTypesInnerWeightRulesInner) SetMinWeight(v float32) {
	o.MinWeight = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ParcelTypesInnerWeightRulesInner) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelTypesInnerWeightRulesInner) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ParcelTypesInnerWeightRulesInner) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ParcelTypesInnerWeightRulesInner) SetRequired(v bool) {
	o.Required = &v
}

// GetUnitOfMeasurement returns the UnitOfMeasurement field value if set, zero value otherwise.
func (o *ParcelTypesInnerWeightRulesInner) GetUnitOfMeasurement() string {
	if o == nil || IsNil(o.UnitOfMeasurement) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasurement
}

// GetUnitOfMeasurementOk returns a tuple with the UnitOfMeasurement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelTypesInnerWeightRulesInner) GetUnitOfMeasurementOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasurement) {
		return nil, false
	}
	return o.UnitOfMeasurement, true
}

// HasUnitOfMeasurement returns a boolean if a field has been set.
func (o *ParcelTypesInnerWeightRulesInner) HasUnitOfMeasurement() bool {
	if o != nil && !IsNil(o.UnitOfMeasurement) {
		return true
	}

	return false
}

// SetUnitOfMeasurement gets a reference to the given string and assigns it to the UnitOfMeasurement field.
func (o *ParcelTypesInnerWeightRulesInner) SetUnitOfMeasurement(v string) {
	o.UnitOfMeasurement = &v
}

func (o ParcelTypesInnerWeightRulesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParcelTypesInnerWeightRulesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxWeight) {
		toSerialize["maxWeight"] = o.MaxWeight
	}
	if !IsNil(o.MinWeight) {
		toSerialize["minWeight"] = o.MinWeight
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.UnitOfMeasurement) {
		toSerialize["unitOfMeasurement"] = o.UnitOfMeasurement
	}
	return toSerialize, nil
}

type NullableParcelTypesInnerWeightRulesInner struct {
	value *ParcelTypesInnerWeightRulesInner
	isSet bool
}

func (v NullableParcelTypesInnerWeightRulesInner) Get() *ParcelTypesInnerWeightRulesInner {
	return v.value
}

func (v *NullableParcelTypesInnerWeightRulesInner) Set(val *ParcelTypesInnerWeightRulesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableParcelTypesInnerWeightRulesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableParcelTypesInnerWeightRulesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParcelTypesInnerWeightRulesInner(val *ParcelTypesInnerWeightRulesInner) *NullableParcelTypesInnerWeightRulesInner {
	return &NullableParcelTypesInnerWeightRulesInner{value: val, isSet: true}
}

func (v NullableParcelTypesInnerWeightRulesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParcelTypesInnerWeightRulesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


