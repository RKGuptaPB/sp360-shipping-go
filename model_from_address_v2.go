/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FromAddressV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FromAddressV2{}

// FromAddressV2 The complete address of the Sender.
type FromAddressV2 struct {
	// The name of the Sender to which this address points.<br /> `Max length = 30`.
	Name string `json:"name"`
	// The addressLine1 contains the Flat number, Building or Apartment Name/number (if any) or company name (if not residential) of the Sender. <br /> `Max length = 35`.
	AddressLine1 string `json:"addressLine1"`
	// The name of the city or town the Sender's address belongs to. <br /> `Max length = 30`.
	CityTown string `json:"cityTown"`
	// The name of the State or Province the Sender belongs to. It is the `2-letter` State or Provice Code for US or Canadian address(es).
	StateProvince string `json:"stateProvince"`
	// The Postal Code or ZIP Code of the address. <br /> For CA addresses, use a `six-character` alphanumeric string Postal Code in this format: 'A1A 1A1'. <br /> While for US addresses, use either the `5-digit` or `9-digit` ZIP Code in one of the following formats: '12345' or '12345-6789'.
	PostalCode string `json:"postalCode"`
	// The country in which the sender's address is located. The value will be the two-character ISO Code of the country from the ISO country list. <br /> Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines.
	CountryCode *string `json:"countryCode,omitempty"`
	// The name of the company, in case if the sender address is not residential. <br /> `Max length = 30`.
	Company *string `json:"company,omitempty"`
	// This is sender's phone number. Enter the digits with or without spaces or hyphens. <br /> `Max length = 15`.
	Phone *string `json:"phone,omitempty"`
	// The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be 'true', else it will take 'false'.
	Residential *bool `json:"residential,omitempty"`
}

type _FromAddressV2 FromAddressV2

// NewFromAddressV2 instantiates a new FromAddressV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFromAddressV2(name string, addressLine1 string, cityTown string, stateProvince string, postalCode string) *FromAddressV2 {
	this := FromAddressV2{}
	this.Name = name
	this.AddressLine1 = addressLine1
	this.CityTown = cityTown
	this.StateProvince = stateProvince
	this.PostalCode = postalCode
	return &this
}

// NewFromAddressV2WithDefaults instantiates a new FromAddressV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFromAddressV2WithDefaults() *FromAddressV2 {
	this := FromAddressV2{}
	return &this
}

// GetName returns the Name field value
func (o *FromAddressV2) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FromAddressV2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FromAddressV2) SetName(v string) {
	o.Name = v
}

// GetAddressLine1 returns the AddressLine1 field value
func (o *FromAddressV2) GetAddressLine1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value
// and a boolean to check if the value has been set.
func (o *FromAddressV2) GetAddressLine1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressLine1, true
}

// SetAddressLine1 sets field value
func (o *FromAddressV2) SetAddressLine1(v string) {
	o.AddressLine1 = v
}

// GetCityTown returns the CityTown field value
func (o *FromAddressV2) GetCityTown() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CityTown
}

// GetCityTownOk returns a tuple with the CityTown field value
// and a boolean to check if the value has been set.
func (o *FromAddressV2) GetCityTownOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CityTown, true
}

// SetCityTown sets field value
func (o *FromAddressV2) SetCityTown(v string) {
	o.CityTown = v
}

// GetStateProvince returns the StateProvince field value
func (o *FromAddressV2) GetStateProvince() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateProvince
}

// GetStateProvinceOk returns a tuple with the StateProvince field value
// and a boolean to check if the value has been set.
func (o *FromAddressV2) GetStateProvinceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateProvince, true
}

// SetStateProvince sets field value
func (o *FromAddressV2) SetStateProvince(v string) {
	o.StateProvince = v
}

// GetPostalCode returns the PostalCode field value
func (o *FromAddressV2) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *FromAddressV2) GetPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *FromAddressV2) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *FromAddressV2) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FromAddressV2) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *FromAddressV2) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *FromAddressV2) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *FromAddressV2) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FromAddressV2) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *FromAddressV2) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *FromAddressV2) SetCompany(v string) {
	o.Company = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *FromAddressV2) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FromAddressV2) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *FromAddressV2) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *FromAddressV2) SetPhone(v string) {
	o.Phone = &v
}

// GetResidential returns the Residential field value if set, zero value otherwise.
func (o *FromAddressV2) GetResidential() bool {
	if o == nil || IsNil(o.Residential) {
		var ret bool
		return ret
	}
	return *o.Residential
}

// GetResidentialOk returns a tuple with the Residential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FromAddressV2) GetResidentialOk() (*bool, bool) {
	if o == nil || IsNil(o.Residential) {
		return nil, false
	}
	return o.Residential, true
}

// HasResidential returns a boolean if a field has been set.
func (o *FromAddressV2) HasResidential() bool {
	if o != nil && !IsNil(o.Residential) {
		return true
	}

	return false
}

// SetResidential gets a reference to the given bool and assigns it to the Residential field.
func (o *FromAddressV2) SetResidential(v bool) {
	o.Residential = &v
}

func (o FromAddressV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FromAddressV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["addressLine1"] = o.AddressLine1
	toSerialize["cityTown"] = o.CityTown
	toSerialize["stateProvince"] = o.StateProvince
	toSerialize["postalCode"] = o.PostalCode
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Residential) {
		toSerialize["residential"] = o.Residential
	}
	return toSerialize, nil
}

func (o *FromAddressV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"addressLine1",
		"cityTown",
		"stateProvince",
		"postalCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFromAddressV2 := _FromAddressV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFromAddressV2)

	if err != nil {
		return err
	}

	*o = FromAddressV2(varFromAddressV2)

	return err
}

type NullableFromAddressV2 struct {
	value *FromAddressV2
	isSet bool
}

func (v NullableFromAddressV2) Get() *FromAddressV2 {
	return v.value
}

func (v *NullableFromAddressV2) Set(val *FromAddressV2) {
	v.value = val
	v.isSet = true
}

func (v NullableFromAddressV2) IsSet() bool {
	return v.isSet
}

func (v *NullableFromAddressV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFromAddressV2(val *FromAddressV2) *NullableFromAddressV2 {
	return &NullableFromAddressV2{value: val, isSet: true}
}

func (v NullableFromAddressV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFromAddressV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


