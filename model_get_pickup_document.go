/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the GetPickupDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetPickupDocument{}

// GetPickupDocument struct for GetPickupDocument
type GetPickupDocument struct {
	// description
	PickupId *string `json:"pickupId,omitempty"`
	// description
	Url *string `json:"url,omitempty"`
}

// NewGetPickupDocument instantiates a new GetPickupDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPickupDocument() *GetPickupDocument {
	this := GetPickupDocument{}
	return &this
}

// NewGetPickupDocumentWithDefaults instantiates a new GetPickupDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPickupDocumentWithDefaults() *GetPickupDocument {
	this := GetPickupDocument{}
	return &this
}

// GetPickupId returns the PickupId field value if set, zero value otherwise.
func (o *GetPickupDocument) GetPickupId() string {
	if o == nil || IsNil(o.PickupId) {
		var ret string
		return ret
	}
	return *o.PickupId
}

// GetPickupIdOk returns a tuple with the PickupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPickupDocument) GetPickupIdOk() (*string, bool) {
	if o == nil || IsNil(o.PickupId) {
		return nil, false
	}
	return o.PickupId, true
}

// HasPickupId returns a boolean if a field has been set.
func (o *GetPickupDocument) HasPickupId() bool {
	if o != nil && !IsNil(o.PickupId) {
		return true
	}

	return false
}

// SetPickupId gets a reference to the given string and assigns it to the PickupId field.
func (o *GetPickupDocument) SetPickupId(v string) {
	o.PickupId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GetPickupDocument) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPickupDocument) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GetPickupDocument) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GetPickupDocument) SetUrl(v string) {
	o.Url = &v
}

func (o GetPickupDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetPickupDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PickupId) {
		toSerialize["pickupId"] = o.PickupId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableGetPickupDocument struct {
	value *GetPickupDocument
	isSet bool
}

func (v NullableGetPickupDocument) Get() *GetPickupDocument {
	return v.value
}

func (v *NullableGetPickupDocument) Set(val *GetPickupDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPickupDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPickupDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPickupDocument(val *GetPickupDocument) *NullableGetPickupDocument {
	return &NullableGetPickupDocument{value: val, isSet: true}
}

func (v NullableGetPickupDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPickupDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


