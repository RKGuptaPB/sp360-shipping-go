/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// MultipieceRatesRequest - struct for MultipieceRatesRequest
type MultipieceRatesRequest struct {
	MultipieceRateShopRequest *MultipieceRateShopRequest
	MultipieceRatesRequest *MultipieceRatesRequest
}

// MultipieceRateShopRequestAsMultipieceRatesRequest is a convenience function that returns MultipieceRateShopRequest wrapped in MultipieceRatesRequest
func MultipieceRateShopRequestAsMultipieceRatesRequest(v *MultipieceRateShopRequest) MultipieceRatesRequest {
	return MultipieceRatesRequest{
		MultipieceRateShopRequest: v,
	}
}

// MultipieceRatesRequestAsMultipieceRatesRequest is a convenience function that returns MultipieceRatesRequest wrapped in MultipieceRatesRequest
func MultipieceRatesRequestAsMultipieceRatesRequest(v *MultipieceRatesRequest) MultipieceRatesRequest {
	return MultipieceRatesRequest{
		MultipieceRatesRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultipieceRatesRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MultipieceRateShopRequest
	err = newStrictDecoder(data).Decode(&dst.MultipieceRateShopRequest)
	if err == nil {
		jsonMultipieceRateShopRequest, _ := json.Marshal(dst.MultipieceRateShopRequest)
		if string(jsonMultipieceRateShopRequest) == "{}" { // empty struct
			dst.MultipieceRateShopRequest = nil
		} else {
			if err = validator.Validate(dst.MultipieceRateShopRequest); err != nil {
				dst.MultipieceRateShopRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultipieceRateShopRequest = nil
	}

	// try to unmarshal data into MultipieceRatesRequest
	err = newStrictDecoder(data).Decode(&dst.MultipieceRatesRequest)
	if err == nil {
		jsonMultipieceRatesRequest, _ := json.Marshal(dst.MultipieceRatesRequest)
		if string(jsonMultipieceRatesRequest) == "{}" { // empty struct
			dst.MultipieceRatesRequest = nil
		} else {
			if err = validator.Validate(dst.MultipieceRatesRequest); err != nil {
				dst.MultipieceRatesRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultipieceRatesRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MultipieceRateShopRequest = nil
		dst.MultipieceRatesRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultipieceRatesRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultipieceRatesRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultipieceRatesRequest) MarshalJSON() ([]byte, error) {
	if src.MultipieceRateShopRequest != nil {
		return json.Marshal(&src.MultipieceRateShopRequest)
	}

	if src.MultipieceRatesRequest != nil {
		return json.Marshal(&src.MultipieceRatesRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultipieceRatesRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MultipieceRateShopRequest != nil {
		return obj.MultipieceRateShopRequest
	}

	if obj.MultipieceRatesRequest != nil {
		return obj.MultipieceRatesRequest
	}

	// all schemas are nil
	return nil
}

type NullableMultipieceRatesRequest struct {
	value *MultipieceRatesRequest
	isSet bool
}

func (v NullableMultipieceRatesRequest) Get() *MultipieceRatesRequest {
	return v.value
}

func (v *NullableMultipieceRatesRequest) Set(val *MultipieceRatesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipieceRatesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipieceRatesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipieceRatesRequest(val *MultipieceRatesRequest) *NullableMultipieceRatesRequest {
	return &NullableMultipieceRatesRequest{value: val, isSet: true}
}

func (v NullableMultipieceRatesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipieceRatesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


