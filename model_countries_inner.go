/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the CountriesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountriesInner{}

// CountriesInner struct for CountriesInner
type CountriesInner struct {
	// The two-character ISO Code of the country from this ISO country list.  The country in which the address is located. Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines.
	CountryCode *string `json:"countryCode,omitempty"`
	// The name of the country.
	CountryName *string `json:"countryName,omitempty"`
}

// NewCountriesInner instantiates a new CountriesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountriesInner() *CountriesInner {
	this := CountriesInner{}
	return &this
}

// NewCountriesInnerWithDefaults instantiates a new CountriesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountriesInnerWithDefaults() *CountriesInner {
	this := CountriesInner{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *CountriesInner) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountriesInner) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *CountriesInner) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *CountriesInner) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *CountriesInner) GetCountryName() string {
	if o == nil || IsNil(o.CountryName) {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountriesInner) GetCountryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CountryName) {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *CountriesInner) HasCountryName() bool {
	if o != nil && !IsNil(o.CountryName) {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *CountriesInner) SetCountryName(v string) {
	o.CountryName = &v
}

func (o CountriesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountriesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.CountryName) {
		toSerialize["countryName"] = o.CountryName
	}
	return toSerialize, nil
}

type NullableCountriesInner struct {
	value *CountriesInner
	isSet bool
}

func (v NullableCountriesInner) Get() *CountriesInner {
	return v.value
}

func (v *NullableCountriesInner) Set(val *CountriesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCountriesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCountriesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountriesInner(val *CountriesInner) *NullableCountriesInner {
	return &NullableCountriesInner{value: val, isSet: true}
}

func (v NullableCountriesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountriesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


