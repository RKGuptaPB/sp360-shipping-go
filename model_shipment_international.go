/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ShipmentInternational type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShipmentInternational{}

// ShipmentInternational struct for ShipmentInternational
type ShipmentInternational struct {
	// Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8' X 11').
	Size string `json:"size"`
	// Defines the type of the Shipment, e.g., Shipping Label.
	Type string `json:"type"`
	// Defines the type of the shipment which is printed. For example, Shipping label prints in PDF form.
	Format *string `json:"format,omitempty"`
	// Defines the date of the Shipment in the format YYYY:MM: DD.
	DateOfShipment *string `json:"dateOfShipment,omitempty"`
	FromAddress ShipmentInternationalFromAddress `json:"fromAddress"`
	Parcel ShipmentDomesticParcel `json:"parcel"`
	// The unique identifier associated with the Carrier account used by client users during shipment process.
	CarrierAccountId string `json:"carrierAccountId"`
	// >-Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. It has categories like Package, Envelopes, Paks, Boxes, Tube, defined per specific carrier and used in abbreviated form, e.g., FRPKG, LGENV, TUBE, PKG.
	ParcelType string `json:"parcelType"`
	// >-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.
	ServiceId string `json:"serviceId"`
	// It provides a carrier-service based special or extra service.
	SpecialServices []SpecialService `json:"specialServices,omitempty"`
	ShipmentOptions *ShipmentOptions `json:"shipmentOptions,omitempty"`
	// Additional metadata that needs to be stored for this shipment can be added here. For now, 'Cost Account Name' is supported.
	Metadata []ShipmentDomesticMetadataInner `json:"metadata,omitempty"`
	ToAddress ShipmentInternationalToAddress `json:"toAddress"`
	Customs ShipmentInternationalCustoms `json:"customs"`
}

type _ShipmentInternational ShipmentInternational

// NewShipmentInternational instantiates a new ShipmentInternational object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShipmentInternational(size string, type_ string, fromAddress ShipmentInternationalFromAddress, parcel ShipmentDomesticParcel, carrierAccountId string, parcelType string, serviceId string, toAddress ShipmentInternationalToAddress, customs ShipmentInternationalCustoms) *ShipmentInternational {
	this := ShipmentInternational{}
	this.Size = size
	this.Type = type_
	this.FromAddress = fromAddress
	this.Parcel = parcel
	this.CarrierAccountId = carrierAccountId
	this.ParcelType = parcelType
	this.ServiceId = serviceId
	this.ToAddress = toAddress
	this.Customs = customs
	return &this
}

// NewShipmentInternationalWithDefaults instantiates a new ShipmentInternational object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShipmentInternationalWithDefaults() *ShipmentInternational {
	this := ShipmentInternational{}
	return &this
}

// GetSize returns the Size field value
func (o *ShipmentInternational) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ShipmentInternational) SetSize(v string) {
	o.Size = v
}

// GetType returns the Type field value
func (o *ShipmentInternational) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ShipmentInternational) SetType(v string) {
	o.Type = v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ShipmentInternational) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ShipmentInternational) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ShipmentInternational) SetFormat(v string) {
	o.Format = &v
}

// GetDateOfShipment returns the DateOfShipment field value if set, zero value otherwise.
func (o *ShipmentInternational) GetDateOfShipment() string {
	if o == nil || IsNil(o.DateOfShipment) {
		var ret string
		return ret
	}
	return *o.DateOfShipment
}

// GetDateOfShipmentOk returns a tuple with the DateOfShipment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetDateOfShipmentOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfShipment) {
		return nil, false
	}
	return o.DateOfShipment, true
}

// HasDateOfShipment returns a boolean if a field has been set.
func (o *ShipmentInternational) HasDateOfShipment() bool {
	if o != nil && !IsNil(o.DateOfShipment) {
		return true
	}

	return false
}

// SetDateOfShipment gets a reference to the given string and assigns it to the DateOfShipment field.
func (o *ShipmentInternational) SetDateOfShipment(v string) {
	o.DateOfShipment = &v
}

// GetFromAddress returns the FromAddress field value
func (o *ShipmentInternational) GetFromAddress() ShipmentInternationalFromAddress {
	if o == nil {
		var ret ShipmentInternationalFromAddress
		return ret
	}

	return o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetFromAddressOk() (*ShipmentInternationalFromAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAddress, true
}

// SetFromAddress sets field value
func (o *ShipmentInternational) SetFromAddress(v ShipmentInternationalFromAddress) {
	o.FromAddress = v
}

// GetParcel returns the Parcel field value
func (o *ShipmentInternational) GetParcel() ShipmentDomesticParcel {
	if o == nil {
		var ret ShipmentDomesticParcel
		return ret
	}

	return o.Parcel
}

// GetParcelOk returns a tuple with the Parcel field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetParcelOk() (*ShipmentDomesticParcel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parcel, true
}

// SetParcel sets field value
func (o *ShipmentInternational) SetParcel(v ShipmentDomesticParcel) {
	o.Parcel = v
}

// GetCarrierAccountId returns the CarrierAccountId field value
func (o *ShipmentInternational) GetCarrierAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CarrierAccountId
}

// GetCarrierAccountIdOk returns a tuple with the CarrierAccountId field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetCarrierAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CarrierAccountId, true
}

// SetCarrierAccountId sets field value
func (o *ShipmentInternational) SetCarrierAccountId(v string) {
	o.CarrierAccountId = v
}

// GetParcelType returns the ParcelType field value
func (o *ShipmentInternational) GetParcelType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParcelType
}

// GetParcelTypeOk returns a tuple with the ParcelType field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetParcelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParcelType, true
}

// SetParcelType sets field value
func (o *ShipmentInternational) SetParcelType(v string) {
	o.ParcelType = v
}

// GetServiceId returns the ServiceId field value
func (o *ShipmentInternational) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *ShipmentInternational) SetServiceId(v string) {
	o.ServiceId = v
}

// GetSpecialServices returns the SpecialServices field value if set, zero value otherwise.
func (o *ShipmentInternational) GetSpecialServices() []SpecialService {
	if o == nil || IsNil(o.SpecialServices) {
		var ret []SpecialService
		return ret
	}
	return o.SpecialServices
}

// GetSpecialServicesOk returns a tuple with the SpecialServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetSpecialServicesOk() ([]SpecialService, bool) {
	if o == nil || IsNil(o.SpecialServices) {
		return nil, false
	}
	return o.SpecialServices, true
}

// HasSpecialServices returns a boolean if a field has been set.
func (o *ShipmentInternational) HasSpecialServices() bool {
	if o != nil && !IsNil(o.SpecialServices) {
		return true
	}

	return false
}

// SetSpecialServices gets a reference to the given []SpecialService and assigns it to the SpecialServices field.
func (o *ShipmentInternational) SetSpecialServices(v []SpecialService) {
	o.SpecialServices = v
}

// GetShipmentOptions returns the ShipmentOptions field value if set, zero value otherwise.
func (o *ShipmentInternational) GetShipmentOptions() ShipmentOptions {
	if o == nil || IsNil(o.ShipmentOptions) {
		var ret ShipmentOptions
		return ret
	}
	return *o.ShipmentOptions
}

// GetShipmentOptionsOk returns a tuple with the ShipmentOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetShipmentOptionsOk() (*ShipmentOptions, bool) {
	if o == nil || IsNil(o.ShipmentOptions) {
		return nil, false
	}
	return o.ShipmentOptions, true
}

// HasShipmentOptions returns a boolean if a field has been set.
func (o *ShipmentInternational) HasShipmentOptions() bool {
	if o != nil && !IsNil(o.ShipmentOptions) {
		return true
	}

	return false
}

// SetShipmentOptions gets a reference to the given ShipmentOptions and assigns it to the ShipmentOptions field.
func (o *ShipmentInternational) SetShipmentOptions(v ShipmentOptions) {
	o.ShipmentOptions = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ShipmentInternational) GetMetadata() []ShipmentDomesticMetadataInner {
	if o == nil || IsNil(o.Metadata) {
		var ret []ShipmentDomesticMetadataInner
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetMetadataOk() ([]ShipmentDomesticMetadataInner, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ShipmentInternational) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []ShipmentDomesticMetadataInner and assigns it to the Metadata field.
func (o *ShipmentInternational) SetMetadata(v []ShipmentDomesticMetadataInner) {
	o.Metadata = v
}

// GetToAddress returns the ToAddress field value
func (o *ShipmentInternational) GetToAddress() ShipmentInternationalToAddress {
	if o == nil {
		var ret ShipmentInternationalToAddress
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetToAddressOk() (*ShipmentInternationalToAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *ShipmentInternational) SetToAddress(v ShipmentInternationalToAddress) {
	o.ToAddress = v
}

// GetCustoms returns the Customs field value
func (o *ShipmentInternational) GetCustoms() ShipmentInternationalCustoms {
	if o == nil {
		var ret ShipmentInternationalCustoms
		return ret
	}

	return o.Customs
}

// GetCustomsOk returns a tuple with the Customs field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetCustomsOk() (*ShipmentInternationalCustoms, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Customs, true
}

// SetCustoms sets field value
func (o *ShipmentInternational) SetCustoms(v ShipmentInternationalCustoms) {
	o.Customs = v
}

func (o ShipmentInternational) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShipmentInternational) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["size"] = o.Size
	toSerialize["type"] = o.Type
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.DateOfShipment) {
		toSerialize["dateOfShipment"] = o.DateOfShipment
	}
	toSerialize["fromAddress"] = o.FromAddress
	toSerialize["parcel"] = o.Parcel
	toSerialize["carrierAccountId"] = o.CarrierAccountId
	toSerialize["parcelType"] = o.ParcelType
	toSerialize["serviceId"] = o.ServiceId
	if !IsNil(o.SpecialServices) {
		toSerialize["specialServices"] = o.SpecialServices
	}
	if !IsNil(o.ShipmentOptions) {
		toSerialize["shipmentOptions"] = o.ShipmentOptions
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["toAddress"] = o.ToAddress
	toSerialize["customs"] = o.Customs
	return toSerialize, nil
}

func (o *ShipmentInternational) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"size",
		"type",
		"fromAddress",
		"parcel",
		"carrierAccountId",
		"parcelType",
		"serviceId",
		"toAddress",
		"customs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShipmentInternational := _ShipmentInternational{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShipmentInternational)

	if err != nil {
		return err
	}

	*o = ShipmentInternational(varShipmentInternational)

	return err
}

type NullableShipmentInternational struct {
	value *ShipmentInternational
	isSet bool
}

func (v NullableShipmentInternational) Get() *ShipmentInternational {
	return v.value
}

func (v *NullableShipmentInternational) Set(val *ShipmentInternational) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentInternational) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentInternational) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentInternational(val *ShipmentInternational) *NullableShipmentInternational {
	return &NullableShipmentInternational{value: val, isSet: true}
}

func (v NullableShipmentInternational) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentInternational) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


