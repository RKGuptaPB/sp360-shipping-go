/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the Carriers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Carriers{}

// Carriers struct for Carriers
type Carriers struct {
	Carriers []CarriersCarriersInner `json:"carriers,omitempty"`
}

// NewCarriers instantiates a new Carriers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCarriers() *Carriers {
	this := Carriers{}
	return &this
}

// NewCarriersWithDefaults instantiates a new Carriers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCarriersWithDefaults() *Carriers {
	this := Carriers{}
	return &this
}

// GetCarriers returns the Carriers field value if set, zero value otherwise.
func (o *Carriers) GetCarriers() []CarriersCarriersInner {
	if o == nil || IsNil(o.Carriers) {
		var ret []CarriersCarriersInner
		return ret
	}
	return o.Carriers
}

// GetCarriersOk returns a tuple with the Carriers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Carriers) GetCarriersOk() ([]CarriersCarriersInner, bool) {
	if o == nil || IsNil(o.Carriers) {
		return nil, false
	}
	return o.Carriers, true
}

// HasCarriers returns a boolean if a field has been set.
func (o *Carriers) HasCarriers() bool {
	if o != nil && !IsNil(o.Carriers) {
		return true
	}

	return false
}

// SetCarriers gets a reference to the given []CarriersCarriersInner and assigns it to the Carriers field.
func (o *Carriers) SetCarriers(v []CarriersCarriersInner) {
	o.Carriers = v
}

func (o Carriers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Carriers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Carriers) {
		toSerialize["carriers"] = o.Carriers
	}
	return toSerialize, nil
}

type NullableCarriers struct {
	value *Carriers
	isSet bool
}

func (v NullableCarriers) Get() *Carriers {
	return v.value
}

func (v *NullableCarriers) Set(val *Carriers) {
	v.value = val
	v.isSet = true
}

func (v NullableCarriers) IsSet() bool {
	return v.isSet
}

func (v *NullableCarriers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarriers(val *Carriers) *NullableCarriers {
	return &NullableCarriers{value: val, isSet: true}
}

func (v NullableCarriers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarriers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


