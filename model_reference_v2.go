/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the ReferenceV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReferenceV2{}

// ReferenceV2 References are tags or information that is printed on Shipping Label based on the customer's requirement. <br /> Reference Fields can have values/indication like Department Name, Invoice No., PO No., Package description, Order No./ Purchase Order No., Carrier note, Cost Account No., Transportation No., etc. But each of the reference field can have one indication/value. 
type ReferenceV2 struct {
	// Reference 1 can have one of the above-indicated values/information which is printed on Label, e.g. Cost Account No. (if any) or Invoice Number. <br /> `Max length = 30`.
	Reference1 *string `json:"reference1,omitempty"`
	// Reference 2 can have other details as indicated in the list above. This is also printed on Label, e.g. Package Description . <br /> `Max length = 30`.
	Reference2 *string `json:"reference2,omitempty"`
	// Reference 3 can have the information which were not fulfilled in Ref1 and Ref2, e.g. Order No. or Purchase Order ID. <br /> `Max length = 30`.
	Reference3 *string `json:"reference3,omitempty"`
	// Reference 4 can have more information which were not provided in Ref1, Ref2, or Ref3 e.g. Carrier Note. <br /> `Max length = 30`.
	Reference4 *string `json:"reference4,omitempty"`
	// The Postal Office Number. <br /> `Max length = 30`.
	PoNumber *string `json:"poNumber,omitempty"`
	// The department of the Recipient. <br /> `Max length = 30`.
	Department *string `json:"department,omitempty"`
	// Additional Reference is hardly used, but provided in case if above references are not enough. e.g.Transportation No. <br /> `Max length = 30`.
	AdditionalReference1 *string `json:"additionalReference1,omitempty"`
}

// NewReferenceV2 instantiates a new ReferenceV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceV2() *ReferenceV2 {
	this := ReferenceV2{}
	return &this
}

// NewReferenceV2WithDefaults instantiates a new ReferenceV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceV2WithDefaults() *ReferenceV2 {
	this := ReferenceV2{}
	return &this
}

// GetReference1 returns the Reference1 field value if set, zero value otherwise.
func (o *ReferenceV2) GetReference1() string {
	if o == nil || IsNil(o.Reference1) {
		var ret string
		return ret
	}
	return *o.Reference1
}

// GetReference1Ok returns a tuple with the Reference1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceV2) GetReference1Ok() (*string, bool) {
	if o == nil || IsNil(o.Reference1) {
		return nil, false
	}
	return o.Reference1, true
}

// HasReference1 returns a boolean if a field has been set.
func (o *ReferenceV2) HasReference1() bool {
	if o != nil && !IsNil(o.Reference1) {
		return true
	}

	return false
}

// SetReference1 gets a reference to the given string and assigns it to the Reference1 field.
func (o *ReferenceV2) SetReference1(v string) {
	o.Reference1 = &v
}

// GetReference2 returns the Reference2 field value if set, zero value otherwise.
func (o *ReferenceV2) GetReference2() string {
	if o == nil || IsNil(o.Reference2) {
		var ret string
		return ret
	}
	return *o.Reference2
}

// GetReference2Ok returns a tuple with the Reference2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceV2) GetReference2Ok() (*string, bool) {
	if o == nil || IsNil(o.Reference2) {
		return nil, false
	}
	return o.Reference2, true
}

// HasReference2 returns a boolean if a field has been set.
func (o *ReferenceV2) HasReference2() bool {
	if o != nil && !IsNil(o.Reference2) {
		return true
	}

	return false
}

// SetReference2 gets a reference to the given string and assigns it to the Reference2 field.
func (o *ReferenceV2) SetReference2(v string) {
	o.Reference2 = &v
}

// GetReference3 returns the Reference3 field value if set, zero value otherwise.
func (o *ReferenceV2) GetReference3() string {
	if o == nil || IsNil(o.Reference3) {
		var ret string
		return ret
	}
	return *o.Reference3
}

// GetReference3Ok returns a tuple with the Reference3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceV2) GetReference3Ok() (*string, bool) {
	if o == nil || IsNil(o.Reference3) {
		return nil, false
	}
	return o.Reference3, true
}

// HasReference3 returns a boolean if a field has been set.
func (o *ReferenceV2) HasReference3() bool {
	if o != nil && !IsNil(o.Reference3) {
		return true
	}

	return false
}

// SetReference3 gets a reference to the given string and assigns it to the Reference3 field.
func (o *ReferenceV2) SetReference3(v string) {
	o.Reference3 = &v
}

// GetReference4 returns the Reference4 field value if set, zero value otherwise.
func (o *ReferenceV2) GetReference4() string {
	if o == nil || IsNil(o.Reference4) {
		var ret string
		return ret
	}
	return *o.Reference4
}

// GetReference4Ok returns a tuple with the Reference4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceV2) GetReference4Ok() (*string, bool) {
	if o == nil || IsNil(o.Reference4) {
		return nil, false
	}
	return o.Reference4, true
}

// HasReference4 returns a boolean if a field has been set.
func (o *ReferenceV2) HasReference4() bool {
	if o != nil && !IsNil(o.Reference4) {
		return true
	}

	return false
}

// SetReference4 gets a reference to the given string and assigns it to the Reference4 field.
func (o *ReferenceV2) SetReference4(v string) {
	o.Reference4 = &v
}

// GetPoNumber returns the PoNumber field value if set, zero value otherwise.
func (o *ReferenceV2) GetPoNumber() string {
	if o == nil || IsNil(o.PoNumber) {
		var ret string
		return ret
	}
	return *o.PoNumber
}

// GetPoNumberOk returns a tuple with the PoNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceV2) GetPoNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PoNumber) {
		return nil, false
	}
	return o.PoNumber, true
}

// HasPoNumber returns a boolean if a field has been set.
func (o *ReferenceV2) HasPoNumber() bool {
	if o != nil && !IsNil(o.PoNumber) {
		return true
	}

	return false
}

// SetPoNumber gets a reference to the given string and assigns it to the PoNumber field.
func (o *ReferenceV2) SetPoNumber(v string) {
	o.PoNumber = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *ReferenceV2) GetDepartment() string {
	if o == nil || IsNil(o.Department) {
		var ret string
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceV2) GetDepartmentOk() (*string, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *ReferenceV2) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given string and assigns it to the Department field.
func (o *ReferenceV2) SetDepartment(v string) {
	o.Department = &v
}

// GetAdditionalReference1 returns the AdditionalReference1 field value if set, zero value otherwise.
func (o *ReferenceV2) GetAdditionalReference1() string {
	if o == nil || IsNil(o.AdditionalReference1) {
		var ret string
		return ret
	}
	return *o.AdditionalReference1
}

// GetAdditionalReference1Ok returns a tuple with the AdditionalReference1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceV2) GetAdditionalReference1Ok() (*string, bool) {
	if o == nil || IsNil(o.AdditionalReference1) {
		return nil, false
	}
	return o.AdditionalReference1, true
}

// HasAdditionalReference1 returns a boolean if a field has been set.
func (o *ReferenceV2) HasAdditionalReference1() bool {
	if o != nil && !IsNil(o.AdditionalReference1) {
		return true
	}

	return false
}

// SetAdditionalReference1 gets a reference to the given string and assigns it to the AdditionalReference1 field.
func (o *ReferenceV2) SetAdditionalReference1(v string) {
	o.AdditionalReference1 = &v
}

func (o ReferenceV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReferenceV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reference1) {
		toSerialize["reference1"] = o.Reference1
	}
	if !IsNil(o.Reference2) {
		toSerialize["reference2"] = o.Reference2
	}
	if !IsNil(o.Reference3) {
		toSerialize["reference3"] = o.Reference3
	}
	if !IsNil(o.Reference4) {
		toSerialize["reference4"] = o.Reference4
	}
	if !IsNil(o.PoNumber) {
		toSerialize["poNumber"] = o.PoNumber
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.AdditionalReference1) {
		toSerialize["additionalReference1"] = o.AdditionalReference1
	}
	return toSerialize, nil
}

type NullableReferenceV2 struct {
	value *ReferenceV2
	isSet bool
}

func (v NullableReferenceV2) Get() *ReferenceV2 {
	return v.value
}

func (v *NullableReferenceV2) Set(val *ReferenceV2) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceV2) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceV2(val *ReferenceV2) *NullableReferenceV2 {
	return &NullableReferenceV2{value: val, isSet: true}
}

func (v NullableReferenceV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


