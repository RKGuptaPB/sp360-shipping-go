/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the VoidBatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoidBatchRequest{}

// VoidBatchRequest struct for VoidBatchRequest
type VoidBatchRequest struct {
	// Name of the Batch.
	Name *string `json:"name,omitempty"`
	// Reason for void.
	Reason *string `json:"reason,omitempty"`
	// >-  List of shipmentId, If this is present then only the shipment present in the list will be voided. If this field is not present then whole batch will be voided.
	ShipmentIds []string `json:"shipmentIds,omitempty"`
}

// NewVoidBatchRequest instantiates a new VoidBatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoidBatchRequest() *VoidBatchRequest {
	this := VoidBatchRequest{}
	return &this
}

// NewVoidBatchRequestWithDefaults instantiates a new VoidBatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoidBatchRequestWithDefaults() *VoidBatchRequest {
	this := VoidBatchRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VoidBatchRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoidBatchRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VoidBatchRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VoidBatchRequest) SetName(v string) {
	o.Name = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *VoidBatchRequest) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoidBatchRequest) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *VoidBatchRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *VoidBatchRequest) SetReason(v string) {
	o.Reason = &v
}

// GetShipmentIds returns the ShipmentIds field value if set, zero value otherwise.
func (o *VoidBatchRequest) GetShipmentIds() []string {
	if o == nil || IsNil(o.ShipmentIds) {
		var ret []string
		return ret
	}
	return o.ShipmentIds
}

// GetShipmentIdsOk returns a tuple with the ShipmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoidBatchRequest) GetShipmentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ShipmentIds) {
		return nil, false
	}
	return o.ShipmentIds, true
}

// HasShipmentIds returns a boolean if a field has been set.
func (o *VoidBatchRequest) HasShipmentIds() bool {
	if o != nil && !IsNil(o.ShipmentIds) {
		return true
	}

	return false
}

// SetShipmentIds gets a reference to the given []string and assigns it to the ShipmentIds field.
func (o *VoidBatchRequest) SetShipmentIds(v []string) {
	o.ShipmentIds = v
}

func (o VoidBatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoidBatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.ShipmentIds) {
		toSerialize["shipmentIds"] = o.ShipmentIds
	}
	return toSerialize, nil
}

type NullableVoidBatchRequest struct {
	value *VoidBatchRequest
	isSet bool
}

func (v NullableVoidBatchRequest) Get() *VoidBatchRequest {
	return v.value
}

func (v *NullableVoidBatchRequest) Set(val *VoidBatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVoidBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVoidBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoidBatchRequest(val *VoidBatchRequest) *NullableVoidBatchRequest {
	return &NullableVoidBatchRequest{value: val, isSet: true}
}

func (v NullableVoidBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoidBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


