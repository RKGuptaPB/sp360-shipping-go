/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateManifest200Response - struct for CreateManifest200Response
type CreateManifest200Response struct {
	ManifestCompactResponse *ManifestCompactResponse
	ManifestDetailedResponse *ManifestDetailedResponse
}

// ManifestCompactResponseAsCreateManifest200Response is a convenience function that returns ManifestCompactResponse wrapped in CreateManifest200Response
func ManifestCompactResponseAsCreateManifest200Response(v *ManifestCompactResponse) CreateManifest200Response {
	return CreateManifest200Response{
		ManifestCompactResponse: v,
	}
}

// ManifestDetailedResponseAsCreateManifest200Response is a convenience function that returns ManifestDetailedResponse wrapped in CreateManifest200Response
func ManifestDetailedResponseAsCreateManifest200Response(v *ManifestDetailedResponse) CreateManifest200Response {
	return CreateManifest200Response{
		ManifestDetailedResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateManifest200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ManifestCompactResponse
	err = newStrictDecoder(data).Decode(&dst.ManifestCompactResponse)
	if err == nil {
		jsonManifestCompactResponse, _ := json.Marshal(dst.ManifestCompactResponse)
		if string(jsonManifestCompactResponse) == "{}" { // empty struct
			dst.ManifestCompactResponse = nil
		} else {
			if err = validator.Validate(dst.ManifestCompactResponse); err != nil {
				dst.ManifestCompactResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.ManifestCompactResponse = nil
	}

	// try to unmarshal data into ManifestDetailedResponse
	err = newStrictDecoder(data).Decode(&dst.ManifestDetailedResponse)
	if err == nil {
		jsonManifestDetailedResponse, _ := json.Marshal(dst.ManifestDetailedResponse)
		if string(jsonManifestDetailedResponse) == "{}" { // empty struct
			dst.ManifestDetailedResponse = nil
		} else {
			if err = validator.Validate(dst.ManifestDetailedResponse); err != nil {
				dst.ManifestDetailedResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.ManifestDetailedResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ManifestCompactResponse = nil
		dst.ManifestDetailedResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateManifest200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateManifest200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateManifest200Response) MarshalJSON() ([]byte, error) {
	if src.ManifestCompactResponse != nil {
		return json.Marshal(&src.ManifestCompactResponse)
	}

	if src.ManifestDetailedResponse != nil {
		return json.Marshal(&src.ManifestDetailedResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateManifest200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ManifestCompactResponse != nil {
		return obj.ManifestCompactResponse
	}

	if obj.ManifestDetailedResponse != nil {
		return obj.ManifestDetailedResponse
	}

	// all schemas are nil
	return nil
}

type NullableCreateManifest200Response struct {
	value *CreateManifest200Response
	isSet bool
}

func (v NullableCreateManifest200Response) Get() *CreateManifest200Response {
	return v.value
}

func (v *NullableCreateManifest200Response) Set(val *CreateManifest200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateManifest200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateManifest200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateManifest200Response(val *CreateManifest200Response) *NullableCreateManifest200Response {
	return &NullableCreateManifest200Response{value: val, isSet: true}
}

func (v NullableCreateManifest200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateManifest200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


