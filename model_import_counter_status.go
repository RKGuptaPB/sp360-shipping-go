/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the ImportCounterStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportCounterStatus{}

// ImportCounterStatus Only visible for batch submitted via Import csv file
type ImportCounterStatus struct {
	// The number of items that were successfully processed.
	Success *float32 `json:"success,omitempty"`
	// The number of items that failed processing.
	Failed *float32 `json:"failed,omitempty"`
	// The number of items that are pending processing.
	Pending *float32 `json:"pending,omitempty"`
}

// NewImportCounterStatus instantiates a new ImportCounterStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportCounterStatus() *ImportCounterStatus {
	this := ImportCounterStatus{}
	return &this
}

// NewImportCounterStatusWithDefaults instantiates a new ImportCounterStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportCounterStatusWithDefaults() *ImportCounterStatus {
	this := ImportCounterStatus{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ImportCounterStatus) GetSuccess() float32 {
	if o == nil || IsNil(o.Success) {
		var ret float32
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCounterStatus) GetSuccessOk() (*float32, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ImportCounterStatus) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given float32 and assigns it to the Success field.
func (o *ImportCounterStatus) SetSuccess(v float32) {
	o.Success = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *ImportCounterStatus) GetFailed() float32 {
	if o == nil || IsNil(o.Failed) {
		var ret float32
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCounterStatus) GetFailedOk() (*float32, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *ImportCounterStatus) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given float32 and assigns it to the Failed field.
func (o *ImportCounterStatus) SetFailed(v float32) {
	o.Failed = &v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *ImportCounterStatus) GetPending() float32 {
	if o == nil || IsNil(o.Pending) {
		var ret float32
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCounterStatus) GetPendingOk() (*float32, bool) {
	if o == nil || IsNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *ImportCounterStatus) HasPending() bool {
	if o != nil && !IsNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given float32 and assigns it to the Pending field.
func (o *ImportCounterStatus) SetPending(v float32) {
	o.Pending = &v
}

func (o ImportCounterStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportCounterStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	if !IsNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	return toSerialize, nil
}

type NullableImportCounterStatus struct {
	value *ImportCounterStatus
	isSet bool
}

func (v NullableImportCounterStatus) Get() *ImportCounterStatus {
	return v.value
}

func (v *NullableImportCounterStatus) Set(val *ImportCounterStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableImportCounterStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableImportCounterStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportCounterStatus(val *ImportCounterStatus) *NullableImportCounterStatus {
	return &NullableImportCounterStatus{value: val, isSet: true}
}

func (v NullableImportCounterStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportCounterStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


