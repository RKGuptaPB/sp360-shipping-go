/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the GetAllPickups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetAllPickups{}

// GetAllPickups struct for GetAllPickups
type GetAllPickups struct {
	PageInfo *GetAllPickupsPageInfo `json:"pageInfo,omitempty"`
	Data *GetAllPickupsData `json:"data,omitempty"`
}

// NewGetAllPickups instantiates a new GetAllPickups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetAllPickups() *GetAllPickups {
	this := GetAllPickups{}
	return &this
}

// NewGetAllPickupsWithDefaults instantiates a new GetAllPickups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetAllPickupsWithDefaults() *GetAllPickups {
	this := GetAllPickups{}
	return &this
}

// GetPageInfo returns the PageInfo field value if set, zero value otherwise.
func (o *GetAllPickups) GetPageInfo() GetAllPickupsPageInfo {
	if o == nil || IsNil(o.PageInfo) {
		var ret GetAllPickupsPageInfo
		return ret
	}
	return *o.PageInfo
}

// GetPageInfoOk returns a tuple with the PageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllPickups) GetPageInfoOk() (*GetAllPickupsPageInfo, bool) {
	if o == nil || IsNil(o.PageInfo) {
		return nil, false
	}
	return o.PageInfo, true
}

// HasPageInfo returns a boolean if a field has been set.
func (o *GetAllPickups) HasPageInfo() bool {
	if o != nil && !IsNil(o.PageInfo) {
		return true
	}

	return false
}

// SetPageInfo gets a reference to the given GetAllPickupsPageInfo and assigns it to the PageInfo field.
func (o *GetAllPickups) SetPageInfo(v GetAllPickupsPageInfo) {
	o.PageInfo = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetAllPickups) GetData() GetAllPickupsData {
	if o == nil || IsNil(o.Data) {
		var ret GetAllPickupsData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllPickups) GetDataOk() (*GetAllPickupsData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetAllPickups) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given GetAllPickupsData and assigns it to the Data field.
func (o *GetAllPickups) SetData(v GetAllPickupsData) {
	o.Data = &v
}

func (o GetAllPickups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetAllPickups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PageInfo) {
		toSerialize["pageInfo"] = o.PageInfo
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableGetAllPickups struct {
	value *GetAllPickups
	isSet bool
}

func (v NullableGetAllPickups) Get() *GetAllPickups {
	return v.value
}

func (v *NullableGetAllPickups) Set(val *GetAllPickups) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllPickups) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllPickups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllPickups(val *GetAllPickups) *NullableGetAllPickups {
	return &NullableGetAllPickups{value: val, isSet: true}
}

func (v NullableGetAllPickups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllPickups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


