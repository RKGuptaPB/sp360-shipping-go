/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the SpecialServices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecialServices{}

// SpecialServices struct for SpecialServices
type SpecialServices struct {
	Services []SpecialServicesServicesInner `json:"services,omitempty"`
}

// NewSpecialServices instantiates a new SpecialServices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialServices() *SpecialServices {
	this := SpecialServices{}
	return &this
}

// NewSpecialServicesWithDefaults instantiates a new SpecialServices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialServicesWithDefaults() *SpecialServices {
	this := SpecialServices{}
	return &this
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *SpecialServices) GetServices() []SpecialServicesServicesInner {
	if o == nil || IsNil(o.Services) {
		var ret []SpecialServicesServicesInner
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServices) GetServicesOk() ([]SpecialServicesServicesInner, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *SpecialServices) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []SpecialServicesServicesInner and assigns it to the Services field.
func (o *SpecialServices) SetServices(v []SpecialServicesServicesInner) {
	o.Services = v
}

func (o SpecialServices) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecialServices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	return toSerialize, nil
}

type NullableSpecialServices struct {
	value *SpecialServices
	isSet bool
}

func (v NullableSpecialServices) Get() *SpecialServices {
	return v.value
}

func (v *NullableSpecialServices) Set(val *SpecialServices) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialServices) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialServices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialServices(val *SpecialServices) *NullableSpecialServices {
	return &NullableSpecialServices{value: val, isSet: true}
}

func (v NullableSpecialServices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialServices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


