/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GetRatesRequest - struct for GetRatesRequest
type GetRatesRequest struct {
	RateShop *RateShop
	SingleRate *SingleRate
}

// RateShopAsGetRatesRequest is a convenience function that returns RateShop wrapped in GetRatesRequest
func RateShopAsGetRatesRequest(v *RateShop) GetRatesRequest {
	return GetRatesRequest{
		RateShop: v,
	}
}

// SingleRateAsGetRatesRequest is a convenience function that returns SingleRate wrapped in GetRatesRequest
func SingleRateAsGetRatesRequest(v *SingleRate) GetRatesRequest {
	return GetRatesRequest{
		SingleRate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRatesRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RateShop
	err = newStrictDecoder(data).Decode(&dst.RateShop)
	if err == nil {
		jsonRateShop, _ := json.Marshal(dst.RateShop)
		if string(jsonRateShop) == "{}" { // empty struct
			dst.RateShop = nil
		} else {
			if err = validator.Validate(dst.RateShop); err != nil {
				dst.RateShop = nil
			} else {
				match++
			}
		}
	} else {
		dst.RateShop = nil
	}

	// try to unmarshal data into SingleRate
	err = newStrictDecoder(data).Decode(&dst.SingleRate)
	if err == nil {
		jsonSingleRate, _ := json.Marshal(dst.SingleRate)
		if string(jsonSingleRate) == "{}" { // empty struct
			dst.SingleRate = nil
		} else {
			if err = validator.Validate(dst.SingleRate); err != nil {
				dst.SingleRate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SingleRate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RateShop = nil
		dst.SingleRate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRatesRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRatesRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRatesRequest) MarshalJSON() ([]byte, error) {
	if src.RateShop != nil {
		return json.Marshal(&src.RateShop)
	}

	if src.SingleRate != nil {
		return json.Marshal(&src.SingleRate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRatesRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RateShop != nil {
		return obj.RateShop
	}

	if obj.SingleRate != nil {
		return obj.SingleRate
	}

	// all schemas are nil
	return nil
}

type NullableGetRatesRequest struct {
	value *GetRatesRequest
	isSet bool
}

func (v NullableGetRatesRequest) Get() *GetRatesRequest {
	return v.value
}

func (v *NullableGetRatesRequest) Set(val *GetRatesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRatesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRatesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRatesRequest(val *GetRatesRequest) *NullableGetRatesRequest {
	return &NullableGetRatesRequest{value: val, isSet: true}
}

func (v NullableGetRatesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRatesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


