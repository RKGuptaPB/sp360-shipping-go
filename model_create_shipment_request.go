/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateShipmentRequest - struct for CreateShipmentRequest
type CreateShipmentRequest struct {
	ShipmentDomestic *ShipmentDomestic
	ShipmentInternational *ShipmentInternational
}

// ShipmentDomesticAsCreateShipmentRequest is a convenience function that returns ShipmentDomestic wrapped in CreateShipmentRequest
func ShipmentDomesticAsCreateShipmentRequest(v *ShipmentDomestic) CreateShipmentRequest {
	return CreateShipmentRequest{
		ShipmentDomestic: v,
	}
}

// ShipmentInternationalAsCreateShipmentRequest is a convenience function that returns ShipmentInternational wrapped in CreateShipmentRequest
func ShipmentInternationalAsCreateShipmentRequest(v *ShipmentInternational) CreateShipmentRequest {
	return CreateShipmentRequest{
		ShipmentInternational: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateShipmentRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ShipmentDomestic
	err = newStrictDecoder(data).Decode(&dst.ShipmentDomestic)
	if err == nil {
		jsonShipmentDomestic, _ := json.Marshal(dst.ShipmentDomestic)
		if string(jsonShipmentDomestic) == "{}" { // empty struct
			dst.ShipmentDomestic = nil
		} else {
			if err = validator.Validate(dst.ShipmentDomestic); err != nil {
				dst.ShipmentDomestic = nil
			} else {
				match++
			}
		}
	} else {
		dst.ShipmentDomestic = nil
	}

	// try to unmarshal data into ShipmentInternational
	err = newStrictDecoder(data).Decode(&dst.ShipmentInternational)
	if err == nil {
		jsonShipmentInternational, _ := json.Marshal(dst.ShipmentInternational)
		if string(jsonShipmentInternational) == "{}" { // empty struct
			dst.ShipmentInternational = nil
		} else {
			if err = validator.Validate(dst.ShipmentInternational); err != nil {
				dst.ShipmentInternational = nil
			} else {
				match++
			}
		}
	} else {
		dst.ShipmentInternational = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ShipmentDomestic = nil
		dst.ShipmentInternational = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateShipmentRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateShipmentRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateShipmentRequest) MarshalJSON() ([]byte, error) {
	if src.ShipmentDomestic != nil {
		return json.Marshal(&src.ShipmentDomestic)
	}

	if src.ShipmentInternational != nil {
		return json.Marshal(&src.ShipmentInternational)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateShipmentRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ShipmentDomestic != nil {
		return obj.ShipmentDomestic
	}

	if obj.ShipmentInternational != nil {
		return obj.ShipmentInternational
	}

	// all schemas are nil
	return nil
}

type NullableCreateShipmentRequest struct {
	value *CreateShipmentRequest
	isSet bool
}

func (v NullableCreateShipmentRequest) Get() *CreateShipmentRequest {
	return v.value
}

func (v *NullableCreateShipmentRequest) Set(val *CreateShipmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateShipmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateShipmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateShipmentRequest(val *CreateShipmentRequest) *NullableCreateShipmentRequest {
	return &NullableCreateShipmentRequest{value: val, isSet: true}
}

func (v NullableCreateShipmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateShipmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


