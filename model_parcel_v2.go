/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
)

// checks if the ParcelV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParcelV2{}

// ParcelV2 The details of the Parcel.
type ParcelV2 struct {
	// Length is always the greatest of the three dimensions. The other two dimensions are used in the calculation of the girth.
	Length *float32 `json:"length,omitempty"`
	// There is no strict rule as to which element is the width or the height, but the width is the second greatest dimension of a parcel by convention.
	Width *float32 `json:"width,omitempty"`
	// By convention the height is the smallest dimension of the parcel.
	Height *float32 `json:"height,omitempty"`
	// DimUnit is a standard for measuring the physical quantities of specified dimension parameters.<br /> The valid values are: Inch and Centimeter.
	DimUnit *string `json:"dimUnit,omitempty"`
	// WeightUnit is a standard for measuring the physical quantities of specified weight.<br /> The valid values are: Ounces and Grams.<br /> For USPS shipments, set this to OZ.
	WeightUnit *string `json:"weightUnit,omitempty"`
	// Weight measures the heaviness of an object (how heavy an object is) .
	Weight *float32 `json:"weight,omitempty"`
	// Indicates value of the package.
	PackageValue *float32 `json:"packageValue,omitempty"`
}

// NewParcelV2 instantiates a new ParcelV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParcelV2() *ParcelV2 {
	this := ParcelV2{}
	return &this
}

// NewParcelV2WithDefaults instantiates a new ParcelV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParcelV2WithDefaults() *ParcelV2 {
	this := ParcelV2{}
	return &this
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *ParcelV2) GetLength() float32 {
	if o == nil || IsNil(o.Length) {
		var ret float32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *ParcelV2) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given float32 and assigns it to the Length field.
func (o *ParcelV2) SetLength(v float32) {
	o.Length = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ParcelV2) GetWidth() float32 {
	if o == nil || IsNil(o.Width) {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ParcelV2) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *ParcelV2) SetWidth(v float32) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ParcelV2) GetHeight() float32 {
	if o == nil || IsNil(o.Height) {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ParcelV2) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *ParcelV2) SetHeight(v float32) {
	o.Height = &v
}

// GetDimUnit returns the DimUnit field value if set, zero value otherwise.
func (o *ParcelV2) GetDimUnit() string {
	if o == nil || IsNil(o.DimUnit) {
		var ret string
		return ret
	}
	return *o.DimUnit
}

// GetDimUnitOk returns a tuple with the DimUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetDimUnitOk() (*string, bool) {
	if o == nil || IsNil(o.DimUnit) {
		return nil, false
	}
	return o.DimUnit, true
}

// HasDimUnit returns a boolean if a field has been set.
func (o *ParcelV2) HasDimUnit() bool {
	if o != nil && !IsNil(o.DimUnit) {
		return true
	}

	return false
}

// SetDimUnit gets a reference to the given string and assigns it to the DimUnit field.
func (o *ParcelV2) SetDimUnit(v string) {
	o.DimUnit = &v
}

// GetWeightUnit returns the WeightUnit field value if set, zero value otherwise.
func (o *ParcelV2) GetWeightUnit() string {
	if o == nil || IsNil(o.WeightUnit) {
		var ret string
		return ret
	}
	return *o.WeightUnit
}

// GetWeightUnitOk returns a tuple with the WeightUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetWeightUnitOk() (*string, bool) {
	if o == nil || IsNil(o.WeightUnit) {
		return nil, false
	}
	return o.WeightUnit, true
}

// HasWeightUnit returns a boolean if a field has been set.
func (o *ParcelV2) HasWeightUnit() bool {
	if o != nil && !IsNil(o.WeightUnit) {
		return true
	}

	return false
}

// SetWeightUnit gets a reference to the given string and assigns it to the WeightUnit field.
func (o *ParcelV2) SetWeightUnit(v string) {
	o.WeightUnit = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *ParcelV2) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *ParcelV2) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *ParcelV2) SetWeight(v float32) {
	o.Weight = &v
}

// GetPackageValue returns the PackageValue field value if set, zero value otherwise.
func (o *ParcelV2) GetPackageValue() float32 {
	if o == nil || IsNil(o.PackageValue) {
		var ret float32
		return ret
	}
	return *o.PackageValue
}

// GetPackageValueOk returns a tuple with the PackageValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetPackageValueOk() (*float32, bool) {
	if o == nil || IsNil(o.PackageValue) {
		return nil, false
	}
	return o.PackageValue, true
}

// HasPackageValue returns a boolean if a field has been set.
func (o *ParcelV2) HasPackageValue() bool {
	if o != nil && !IsNil(o.PackageValue) {
		return true
	}

	return false
}

// SetPackageValue gets a reference to the given float32 and assigns it to the PackageValue field.
func (o *ParcelV2) SetPackageValue(v float32) {
	o.PackageValue = &v
}

func (o ParcelV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParcelV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.DimUnit) {
		toSerialize["dimUnit"] = o.DimUnit
	}
	if !IsNil(o.WeightUnit) {
		toSerialize["weightUnit"] = o.WeightUnit
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if !IsNil(o.PackageValue) {
		toSerialize["packageValue"] = o.PackageValue
	}
	return toSerialize, nil
}

type NullableParcelV2 struct {
	value *ParcelV2
	isSet bool
}

func (v NullableParcelV2) Get() *ParcelV2 {
	return v.value
}

func (v *NullableParcelV2) Set(val *ParcelV2) {
	v.value = val
	v.isSet = true
}

func (v NullableParcelV2) IsSet() bool {
	return v.isSet
}

func (v *NullableParcelV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParcelV2(val *ParcelV2) *NullableParcelV2 {
	return &NullableParcelV2{value: val, isSet: true}
}

func (v NullableParcelV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParcelV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


