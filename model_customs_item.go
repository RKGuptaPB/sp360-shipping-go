/*
Shipping APIs

The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sp360shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomsItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomsItem{}

// CustomsItem struct for CustomsItem
type CustomsItem struct {
	// A detailed description of the commodity.
	Description string `json:"description"`
	// >- The destination country's tariff-classification number for the commodity. Most countries use the six-digit Harmonized System (HS) as the basis for their tariff classifications and add additional digits for more detail. The maximum length is 14 characters. If you are issuing the HS Code API, you can use this field to help with the HS code prediction by entering the commodity's HS code from another country, such as from the origin country. Enter the country that the code comes from in the hSTariffCodeCountry field.
	HSTariffCode *string `json:"hSTariffCode,omitempty"`
	// Enter the total number of items of this type of commodity.
	Quantity int32 `json:"quantity"`
	// >- The price of one item of this type of commodity. Currency should be declared under customsInfo.
	UnitPrice float64 `json:"unitPrice"`
	// The unit of measurement. This field is required by the unitWeight object.
	WeightUnit string `json:"weightUnit"`
	// The weight of the item.
	Weight float32 `json:"weight"`
}

type _CustomsItem CustomsItem

// NewCustomsItem instantiates a new CustomsItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomsItem(description string, quantity int32, unitPrice float64, weightUnit string, weight float32) *CustomsItem {
	this := CustomsItem{}
	this.Description = description
	this.Quantity = quantity
	this.UnitPrice = unitPrice
	this.WeightUnit = weightUnit
	this.Weight = weight
	return &this
}

// NewCustomsItemWithDefaults instantiates a new CustomsItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomsItemWithDefaults() *CustomsItem {
	this := CustomsItem{}
	return &this
}

// GetDescription returns the Description field value
func (o *CustomsItem) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CustomsItem) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CustomsItem) SetDescription(v string) {
	o.Description = v
}

// GetHSTariffCode returns the HSTariffCode field value if set, zero value otherwise.
func (o *CustomsItem) GetHSTariffCode() string {
	if o == nil || IsNil(o.HSTariffCode) {
		var ret string
		return ret
	}
	return *o.HSTariffCode
}

// GetHSTariffCodeOk returns a tuple with the HSTariffCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsItem) GetHSTariffCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HSTariffCode) {
		return nil, false
	}
	return o.HSTariffCode, true
}

// HasHSTariffCode returns a boolean if a field has been set.
func (o *CustomsItem) HasHSTariffCode() bool {
	if o != nil && !IsNil(o.HSTariffCode) {
		return true
	}

	return false
}

// SetHSTariffCode gets a reference to the given string and assigns it to the HSTariffCode field.
func (o *CustomsItem) SetHSTariffCode(v string) {
	o.HSTariffCode = &v
}

// GetQuantity returns the Quantity field value
func (o *CustomsItem) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *CustomsItem) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *CustomsItem) SetQuantity(v int32) {
	o.Quantity = v
}

// GetUnitPrice returns the UnitPrice field value
func (o *CustomsItem) GetUnitPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value
// and a boolean to check if the value has been set.
func (o *CustomsItem) GetUnitPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitPrice, true
}

// SetUnitPrice sets field value
func (o *CustomsItem) SetUnitPrice(v float64) {
	o.UnitPrice = v
}

// GetWeightUnit returns the WeightUnit field value
func (o *CustomsItem) GetWeightUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WeightUnit
}

// GetWeightUnitOk returns a tuple with the WeightUnit field value
// and a boolean to check if the value has been set.
func (o *CustomsItem) GetWeightUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeightUnit, true
}

// SetWeightUnit sets field value
func (o *CustomsItem) SetWeightUnit(v string) {
	o.WeightUnit = v
}

// GetWeight returns the Weight field value
func (o *CustomsItem) GetWeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *CustomsItem) GetWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *CustomsItem) SetWeight(v float32) {
	o.Weight = v
}

func (o CustomsItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomsItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	if !IsNil(o.HSTariffCode) {
		toSerialize["hSTariffCode"] = o.HSTariffCode
	}
	toSerialize["quantity"] = o.Quantity
	toSerialize["unitPrice"] = o.UnitPrice
	toSerialize["weightUnit"] = o.WeightUnit
	toSerialize["weight"] = o.Weight
	return toSerialize, nil
}

func (o *CustomsItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"quantity",
		"unitPrice",
		"weightUnit",
		"weight",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomsItem := _CustomsItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomsItem)

	if err != nil {
		return err
	}

	*o = CustomsItem(varCustomsItem)

	return err
}

type NullableCustomsItem struct {
	value *CustomsItem
	isSet bool
}

func (v NullableCustomsItem) Get() *CustomsItem {
	return v.value
}

func (v *NullableCustomsItem) Set(val *CustomsItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomsItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomsItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomsItem(val *CustomsItem) *NullableCustomsItem {
	return &NullableCustomsItem{value: val, isSet: true}
}

func (v NullableCustomsItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomsItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


